{
  "address": "0x46373c4D57F9133Eb474960130BC96A02b0cF3f0",
  "abi": [
    {
      "inputs": [],
      "name": "ReentrancyGuardReentrantCall",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "SafeERC20FailedOperation",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "burnAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tradeFeeAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "refundAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "BC_Burn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "inputAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "mintedAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tradeFeeAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "BC_Mint",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minRefundExpected",
          "type": "uint256"
        }
      ],
      "name": "bc_burn",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "bc_estimate_burn_for_token",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "bc_estimate_mint_for_token",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "actualPaymentAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "bondTokenAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "feeAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_TRADES_PER_PAGE",
          "type": "uint256"
        }
      ],
      "name": "bc_get_total_pages",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_page",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_TRADES_PER_PAGE",
          "type": "uint256"
        }
      ],
      "name": "bc_get_trade_history_byPage",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "tradeId",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "tradeType",
              "type": "bool"
            },
            {
              "internalType": "address",
              "name": "user",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "nickname",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "inputAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "outputAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tradeTime",
              "type": "uint256"
            }
          ],
          "internalType": "struct ofTokenCurveFacet.Trade[]",
          "name": "trades",
          "type": "tuple[]"
        },
        {
          "internalType": "uint256",
          "name": "currentPage",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalPages",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bc_mint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "rangeTo",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            }
          ],
          "internalType": "struct ofTokenCurveFacet.BondStep[]",
          "name": "_bondSteps",
          "type": "tuple[]"
        }
      ],
      "name": "bc_set_steps",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "bondSteps",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "rangeTo",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCurrentStep",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "step",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ofTokenCurveMaxSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ofTokenCurveSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_newFee",
          "type": "uint256"
        }
      ],
      "name": "setTradeFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tradeCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tradeFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tradeHistory",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "tradeId",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "tradeType",
          "type": "bool"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "nickname",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "inputAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "outputAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tradeTime",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x09fad86e9f8041c3e100537bc5fd556f8afcf2b65108dd217d3b1c67e795f5f6",
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0xe81380f9199544813D864a23dBfAB1B27D9a384C",
    "contractAddress": null,
    "transactionIndex": 0,
    "gasUsed": "2262065",
    "logsBloom": "0x
    "blockHash": "0x6da390d6138cd8b4d202c9d4f53a3e84cc3ae8815ced6b3c7cd0e03178fe4c8e",
    "transactionHash": "0x09fad86e9f8041c3e100537bc5fd556f8afcf2b65108dd217d3b1c67e795f5f6",
    "logs": [],
    "blockNumber": 176969346,
    "cumulativeGasUsed": "2262065",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "dba5ad88cb78c0327ff907af4336c2cc",
  "metadata": "{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SafeERC20FailedOperation\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"burnAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tradeFeeAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"refundAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"BC_Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"inputAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"mintedAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tradeFeeAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"BC_Mint\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minRefundExpected\",\"type\":\"uint256\"}],\"name\":\"bc_burn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"bc_estimate_burn_for_token\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"bc_estimate_mint_for_token\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"actualPaymentAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bondTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_TRADES_PER_PAGE\",\"type\":\"uint256\"}],\"name\":\"bc_get_total_pages\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_page\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_TRADES_PER_PAGE\",\"type\":\"uint256\"}],\"name\":\"bc_get_trade_history_byPage\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tradeId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"tradeType\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"nickname\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"inputAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"outputAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tradeTime\",\"type\":\"uint256\"}],\"internalType\":\"struct ofTokenCurveFacet.Trade[]\",\"name\":\"trades\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"currentPage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalPages\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bc_mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"rangeTo\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"internalType\":\"struct ofTokenCurveFacet.BondStep[]\",\"name\":\"_bondSteps\",\"type\":\"tuple[]\"}],\"name\":\"bc_set_steps\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"bondSteps\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rangeTo\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentStep\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"step\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ofTokenCurveMaxSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ofTokenCurveSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newFee\",\"type\":\"uint256\"}],\"name\":\"setTradeFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradeCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradeFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tradeHistory\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tradeId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"tradeType\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"nickname\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"inputAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"outputAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tradeTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}],\"SafeERC20FailedOperation(address)\":[{\"details\":\"An operation with an ERC-20 token failed.\"}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/0_originForge/ofTokenCurveFacet.sol\":\"ofTokenCurveFacet\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/interfaces/IERC1363.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (interfaces/IERC1363.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"./IERC20.sol\\\";\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @title IERC1363\\n * @dev Interface of the ERC-1363 standard as defined in the https://eips.ethereum.org/EIPS/eip-1363[ERC-1363].\\n *\\n * Defines an extension interface for ERC-20 tokens that supports executing code on a recipient contract\\n * after `transfer` or `transferFrom`, or code on a spender contract after `approve`, in a single transaction.\\n */\\ninterface IERC1363 is IERC20, IERC165 {\\n    /*\\n     * Note: the ERC-165 identifier for this interface is 0xb0202a11.\\n     * 0xb0202a11 ===\\n     *   bytes4(keccak256('transferAndCall(address,uint256)')) ^\\n     *   bytes4(keccak256('transferAndCall(address,uint256,bytes)')) ^\\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256)')) ^\\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256,bytes)')) ^\\n     *   bytes4(keccak256('approveAndCall(address,uint256)')) ^\\n     *   bytes4(keccak256('approveAndCall(address,uint256,bytes)'))\\n     */\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferAndCall(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @param data Additional data with no specified format, sent in call to `to`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferAndCall(address to, uint256 value, bytes calldata data) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param from The address which you want to send tokens from.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferFromAndCall(address from, address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param from The address which you want to send tokens from.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @param data Additional data with no specified format, sent in call to `to`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferFromAndCall(address from, address to, uint256 value, bytes calldata data) external returns (bool);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\\n     * @param spender The address which will spend the funds.\\n     * @param value The amount of tokens to be spent.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function approveAndCall(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\\n     * @param spender The address which will spend the funds.\\n     * @param value The amount of tokens to be spent.\\n     * @param data Additional data with no specified format, sent in call to `spender`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function approveAndCall(address spender, uint256 value, bytes calldata data) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9b6b3e7803bc5f2f8cd7ad57db8ac1def61a9930a5a3107df4882e028a9605d7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../utils/introspection/IERC165.sol\\\";\\n\",\"keccak256\":\"0xde7e9fd9aee8d4f40772f96bb3b58836cbc6dfc0227014a061947f8821ea9724\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../token/ERC20/IERC20.sol\\\";\\n\",\"keccak256\":\"0xce41876e78d1badc0512229b4d14e4daf83bc1003d7f83978d18e0e56f965b9c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-20 standard as defined in the ERC.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xe06a3f08a987af6ad2e1c1e774405d4fe08f1694b67517438b467cecf0da0ef7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC-20 standard.\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x70f2f713b13b7ce4610bcd0ac9fec0f3cc43693b043abcb8dc40a42a726eb330\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\nimport {IERC1363} from \\\"../../../interfaces/IERC1363.sol\\\";\\nimport {Address} from \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC-20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    /**\\n     * @dev An operation with an ERC-20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Indicates a failed `decreaseAllowance` request.\\n     */\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     *\\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \\\"client\\\"\\n     * smart contract uses ERC-7674 to set temporary allowances, then the \\\"client\\\" smart contract should avoid using\\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        forceApprove(token, spender, oldAllowance + value);\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\\n     * value, non-reverting calls are assumed to be successful.\\n     *\\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \\\"client\\\"\\n     * smart contract uses ERC-7674 to set temporary allowances, then the \\\"client\\\" smart contract should avoid using\\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\n        unchecked {\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\n            if (currentAllowance < requestedDecrease) {\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\n            }\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     *\\n     * NOTE: If the token implements ERC-7674, this function will not modify any temporary allowance. This function\\n     * only sets the \\\"standard\\\" allowance. Any temporary allowance will remain active, in addition to the value being\\n     * set here.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} transferAndCall, with a fallback to the simple {ERC20} transfer if the target has no\\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function transferAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\\n        if (to.code.length == 0) {\\n            safeTransfer(token, to, value);\\n        } else if (!token.transferAndCall(to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} transferFromAndCall, with a fallback to the simple {ERC20} transferFrom if the target\\n     * has no code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function transferFromAndCallRelaxed(\\n        IERC1363 token,\\n        address from,\\n        address to,\\n        uint256 value,\\n        bytes memory data\\n    ) internal {\\n        if (to.code.length == 0) {\\n            safeTransferFrom(token, from, to, value);\\n        } else if (!token.transferFromAndCall(from, to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} approveAndCall, with a fallback to the simple {ERC20} approve if the target has no\\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * NOTE: When the recipient address (`to`) has no code (i.e. is an EOA), this function behaves as {forceApprove}.\\n     * Opposedly, when the recipient address (`to`) has code, this function only attempts to call {ERC1363-approveAndCall}\\n     * once without retrying, and relies on the returned value to be true.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function approveAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\\n        if (to.code.length == 0) {\\n            forceApprove(token, to, value);\\n        } else if (!token.approveAndCall(to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturnBool} that reverts if call fails to meet the requirements.\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly (\\\"memory-safe\\\") {\\n            let success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\\n            // bubble errors\\n            if iszero(success) {\\n                let ptr := mload(0x40)\\n                returndatacopy(ptr, 0, returndatasize())\\n                revert(ptr, returndatasize())\\n            }\\n            returnSize := returndatasize()\\n            returnValue := mload(0)\\n        }\\n\\n        if (returnSize == 0 ? address(token).code.length == 0 : returnValue != 1) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silently catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        bool success;\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly (\\\"memory-safe\\\") {\\n            success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\\n            returnSize := returndatasize()\\n            returnValue := mload(0)\\n        }\\n        return success && (returnSize == 0 ? address(token).code.length > 0 : returnValue == 1);\\n    }\\n}\\n\",\"keccak256\":\"0xca2ae13e0610f6a99238dd00b97bd786bc92732dae6d6b9d61f573ec51018310\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Errors} from \\\"./Errors.sol\\\";\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert Errors.InsufficientBalance(address(this).balance, amount);\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert Errors.FailedCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {Errors.FailedCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert Errors.InsufficientBalance(address(this).balance, value);\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {Errors.FailedCall}) in case\\n     * of an unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {Errors.FailedCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {Errors.FailedCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            assembly (\\\"memory-safe\\\") {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert Errors.FailedCall();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9d8da059267bac779a2dbbb9a26c2acf00ca83085e105d62d5d4ef96054a47f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/Errors.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of common custom errors used in multiple contracts\\n *\\n * IMPORTANT: Backwards compatibility is not guaranteed in future versions of the library.\\n * It is recommended to avoid relying on the error API for critical functionality.\\n *\\n * _Available since v5.1._\\n */\\nlibrary Errors {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error InsufficientBalance(uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedCall();\\n\\n    /**\\n     * @dev The deployment failed.\\n     */\\n    error FailedDeployment();\\n\\n    /**\\n     * @dev A necessary precompile is missing.\\n     */\\n    error MissingPrecompile(address);\\n}\\n\",\"keccak256\":\"0x6afa713bfd42cf0f7656efa91201007ac465e42049d7de1d50753a373648c123\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Panic.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/Panic.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Helper library for emitting standardized panic codes.\\n *\\n * ```solidity\\n * contract Example {\\n *      using Panic for uint256;\\n *\\n *      // Use any of the declared internal constants\\n *      function foo() { Panic.GENERIC.panic(); }\\n *\\n *      // Alternatively\\n *      function foo() { Panic.panic(Panic.GENERIC); }\\n * }\\n * ```\\n *\\n * Follows the list from https://github.com/ethereum/solidity/blob/v0.8.24/libsolutil/ErrorCodes.h[libsolutil].\\n *\\n * _Available since v5.1._\\n */\\n// slither-disable-next-line unused-state\\nlibrary Panic {\\n    /// @dev generic / unspecified error\\n    uint256 internal constant GENERIC = 0x00;\\n    /// @dev used by the assert() builtin\\n    uint256 internal constant ASSERT = 0x01;\\n    /// @dev arithmetic underflow or overflow\\n    uint256 internal constant UNDER_OVERFLOW = 0x11;\\n    /// @dev division or modulo by zero\\n    uint256 internal constant DIVISION_BY_ZERO = 0x12;\\n    /// @dev enum conversion error\\n    uint256 internal constant ENUM_CONVERSION_ERROR = 0x21;\\n    /// @dev invalid encoding in storage\\n    uint256 internal constant STORAGE_ENCODING_ERROR = 0x22;\\n    /// @dev empty array pop\\n    uint256 internal constant EMPTY_ARRAY_POP = 0x31;\\n    /// @dev array out of bounds access\\n    uint256 internal constant ARRAY_OUT_OF_BOUNDS = 0x32;\\n    /// @dev resource error (too large allocation or too large array)\\n    uint256 internal constant RESOURCE_ERROR = 0x41;\\n    /// @dev calling invalid internal function\\n    uint256 internal constant INVALID_INTERNAL_FUNCTION = 0x51;\\n\\n    /// @dev Reverts with a panic code. Recommended to use with\\n    /// the internal constants with predefined codes.\\n    function panic(uint256 code) internal pure {\\n        assembly (\\\"memory-safe\\\") {\\n            mstore(0x00, 0x4e487b71)\\n            mstore(0x20, code)\\n            revert(0x1c, 0x24)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf7fe324703a64fc51702311dc51562d5cb1497734f074e4f483bfb6717572d7a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If EIP-1153 (transient storage) is available on the chain you're deploying at,\\n * consider using {ReentrancyGuardTransient} instead.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    constructor() {\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if (_status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x11a5a79827df29e915a12740caf62fe21ebe27c08c9ae3e09abe9ee3ba3866d3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Math} from \\\"./math/Math.sol\\\";\\nimport {SignedMath} from \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant HEX_DIGITS = \\\"0123456789abcdef\\\";\\n    uint8 private constant ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev The `value` string doesn't fit in the specified `length`.\\n     */\\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            assembly (\\\"memory-safe\\\") {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                assembly (\\\"memory-safe\\\") {\\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toStringSigned(int256 value) internal pure returns (string memory) {\\n        return string.concat(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value)));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        uint256 localValue = value;\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\\n            localValue >>= 4;\\n        }\\n        if (localValue != 0) {\\n            revert StringsInsufficientHexLength(value, length);\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\\n     * representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its checksummed ASCII `string` hexadecimal\\n     * representation, according to EIP-55.\\n     */\\n    function toChecksumHexString(address addr) internal pure returns (string memory) {\\n        bytes memory buffer = bytes(toHexString(addr));\\n\\n        // hash the hex part of buffer (skip length + 2 bytes, length 40)\\n        uint256 hashValue;\\n        assembly (\\\"memory-safe\\\") {\\n            hashValue := shr(96, keccak256(add(buffer, 0x22), 40))\\n        }\\n\\n        for (uint256 i = 41; i > 1; --i) {\\n            // possible values for buffer[i] are 48 (0) to 57 (9) and 97 (a) to 102 (f)\\n            if (hashValue & 0xf > 7 && uint8(buffer[i]) > 96) {\\n                // case shift by xoring with 0x20\\n                buffer[i] ^= 0x20;\\n            }\\n            hashValue >>= 4;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x725209b582291bb83058e3078624b53d15a133f7401c30295e7f3704181d2aed\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x79796192ec90263f21b464d5bc90b777a525971d3de8232be80d9c4f9fb353b8\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Panic} from \\\"../Panic.sol\\\";\\nimport {SafeCast} from \\\"./SafeCast.sol\\\";\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an success flag (no overflow).\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an success flag (no overflow).\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an success flag (no overflow).\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a success flag (no division by zero).\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a success flag (no division by zero).\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Branchless ternary evaluation for `a ? b : c`. Gas costs are constant.\\n     *\\n     * IMPORTANT: This function may reduce bytecode size and consume less gas when used standalone.\\n     * However, the compiler may optimize Solidity ternary operations (i.e. `a ? b : c`) to only compute\\n     * one branch when needed, making this function more expensive.\\n     */\\n    function ternary(bool condition, uint256 a, uint256 b) internal pure returns (uint256) {\\n        unchecked {\\n            // branchless ternary works because:\\n            // b ^ (a ^ b) == a\\n            // b ^ 0 == b\\n            return b ^ ((a ^ b) * SafeCast.toUint(condition));\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return ternary(a > b, a, b);\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return ternary(a < b, a, b);\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            Panic.panic(Panic.DIVISION_BY_ZERO);\\n        }\\n\\n        // The following calculation ensures accurate ceiling division without overflow.\\n        // Since a is non-zero, (a - 1) / b will not overflow.\\n        // The largest possible result occurs when (a - 1) / b is type(uint256).max,\\n        // but the largest value we can obtain is type(uint256).max - 1, which happens\\n        // when a = type(uint256).max and b = 1.\\n        unchecked {\\n            return SafeCast.toUint(a > 0) * ((a - 1) / b + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     *\\n     * Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2\\u00b2\\u2075\\u2076 and mod 2\\u00b2\\u2075\\u2076 - 1, then use\\n            // the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2\\u00b2\\u2075\\u2076 + prod0.\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2\\u00b2\\u2075\\u2076. Also prevents denominator == 0.\\n            if (denominator <= prod1) {\\n                Panic.panic(ternary(denominator == 0, Panic.DIVISION_BY_ZERO, Panic.UNDER_OVERFLOW));\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2\\u00b2\\u2075\\u2076 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2\\u00b2\\u2075\\u2076. Now that denominator is an odd number, it has an inverse modulo 2\\u00b2\\u2075\\u2076 such\\n            // that denominator * inv \\u2261 1 mod 2\\u00b2\\u2075\\u2076. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv \\u2261 1 mod 2\\u2074.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u2078\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u00b9\\u2076\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u00b3\\u00b2\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u2076\\u2074\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u00b9\\u00b2\\u2078\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u00b2\\u2075\\u2076\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2\\u00b2\\u2075\\u2076. Since the preconditions guarantee that the outcome is\\n            // less than 2\\u00b2\\u2075\\u2076, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @dev Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        return mulDiv(x, y, denominator) + SafeCast.toUint(unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0);\\n    }\\n\\n    /**\\n     * @dev Calculate the modular multiplicative inverse of a number in Z/nZ.\\n     *\\n     * If n is a prime, then Z/nZ is a field. In that case all elements are inversible, except 0.\\n     * If n is not a prime, then Z/nZ is not a field, and some elements might not be inversible.\\n     *\\n     * If the input value is not inversible, 0 is returned.\\n     *\\n     * NOTE: If you know for sure that n is (big) a prime, it may be cheaper to use Fermat's little theorem and get the\\n     * inverse using `Math.modExp(a, n - 2, n)`. See {invModPrime}.\\n     */\\n    function invMod(uint256 a, uint256 n) internal pure returns (uint256) {\\n        unchecked {\\n            if (n == 0) return 0;\\n\\n            // The inverse modulo is calculated using the Extended Euclidean Algorithm (iterative version)\\n            // Used to compute integers x and y such that: ax + ny = gcd(a, n).\\n            // When the gcd is 1, then the inverse of a modulo n exists and it's x.\\n            // ax + ny = 1\\n            // ax = 1 + (-y)n\\n            // ax \\u2261 1 (mod n) # x is the inverse of a modulo n\\n\\n            // If the remainder is 0 the gcd is n right away.\\n            uint256 remainder = a % n;\\n            uint256 gcd = n;\\n\\n            // Therefore the initial coefficients are:\\n            // ax + ny = gcd(a, n) = n\\n            // 0a + 1n = n\\n            int256 x = 0;\\n            int256 y = 1;\\n\\n            while (remainder != 0) {\\n                uint256 quotient = gcd / remainder;\\n\\n                (gcd, remainder) = (\\n                    // The old remainder is the next gcd to try.\\n                    remainder,\\n                    // Compute the next remainder.\\n                    // Can't overflow given that (a % gcd) * (gcd // (a % gcd)) <= gcd\\n                    // where gcd is at most n (capped to type(uint256).max)\\n                    gcd - remainder * quotient\\n                );\\n\\n                (x, y) = (\\n                    // Increment the coefficient of a.\\n                    y,\\n                    // Decrement the coefficient of n.\\n                    // Can overflow, but the result is casted to uint256 so that the\\n                    // next value of y is \\\"wrapped around\\\" to a value between 0 and n - 1.\\n                    x - y * int256(quotient)\\n                );\\n            }\\n\\n            if (gcd != 1) return 0; // No inverse exists.\\n            return ternary(x < 0, n - uint256(-x), uint256(x)); // Wrap the result if it's negative.\\n        }\\n    }\\n\\n    /**\\n     * @dev Variant of {invMod}. More efficient, but only works if `p` is known to be a prime greater than `2`.\\n     *\\n     * From https://en.wikipedia.org/wiki/Fermat%27s_little_theorem[Fermat's little theorem], we know that if p is\\n     * prime, then `a**(p-1) \\u2261 1 mod p`. As a consequence, we have `a * a**(p-2) \\u2261 1 mod p`, which means that\\n     * `a**(p-2)` is the modular multiplicative inverse of a in Fp.\\n     *\\n     * NOTE: this function does NOT check that `p` is a prime greater than `2`.\\n     */\\n    function invModPrime(uint256 a, uint256 p) internal view returns (uint256) {\\n        unchecked {\\n            return Math.modExp(a, p - 2, p);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the modular exponentiation of the specified base, exponent and modulus (b ** e % m)\\n     *\\n     * Requirements:\\n     * - modulus can't be zero\\n     * - underlying staticcall to precompile must succeed\\n     *\\n     * IMPORTANT: The result is only valid if the underlying call succeeds. When using this function, make\\n     * sure the chain you're using it on supports the precompiled contract for modular exponentiation\\n     * at address 0x05 as specified in https://eips.ethereum.org/EIPS/eip-198[EIP-198]. Otherwise,\\n     * the underlying function will succeed given the lack of a revert, but the result may be incorrectly\\n     * interpreted as 0.\\n     */\\n    function modExp(uint256 b, uint256 e, uint256 m) internal view returns (uint256) {\\n        (bool success, uint256 result) = tryModExp(b, e, m);\\n        if (!success) {\\n            Panic.panic(Panic.DIVISION_BY_ZERO);\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the modular exponentiation of the specified base, exponent and modulus (b ** e % m).\\n     * It includes a success flag indicating if the operation succeeded. Operation will be marked as failed if trying\\n     * to operate modulo 0 or if the underlying precompile reverted.\\n     *\\n     * IMPORTANT: The result is only valid if the success flag is true. When using this function, make sure the chain\\n     * you're using it on supports the precompiled contract for modular exponentiation at address 0x05 as specified in\\n     * https://eips.ethereum.org/EIPS/eip-198[EIP-198]. Otherwise, the underlying function will succeed given the lack\\n     * of a revert, but the result may be incorrectly interpreted as 0.\\n     */\\n    function tryModExp(uint256 b, uint256 e, uint256 m) internal view returns (bool success, uint256 result) {\\n        if (m == 0) return (false, 0);\\n        assembly (\\\"memory-safe\\\") {\\n            let ptr := mload(0x40)\\n            // | Offset    | Content    | Content (Hex)                                                      |\\n            // |-----------|------------|--------------------------------------------------------------------|\\n            // | 0x00:0x1f | size of b  | 0x0000000000000000000000000000000000000000000000000000000000000020 |\\n            // | 0x20:0x3f | size of e  | 0x0000000000000000000000000000000000000000000000000000000000000020 |\\n            // | 0x40:0x5f | size of m  | 0x0000000000000000000000000000000000000000000000000000000000000020 |\\n            // | 0x60:0x7f | value of b | 0x<.............................................................b> |\\n            // | 0x80:0x9f | value of e | 0x<.............................................................e> |\\n            // | 0xa0:0xbf | value of m | 0x<.............................................................m> |\\n            mstore(ptr, 0x20)\\n            mstore(add(ptr, 0x20), 0x20)\\n            mstore(add(ptr, 0x40), 0x20)\\n            mstore(add(ptr, 0x60), b)\\n            mstore(add(ptr, 0x80), e)\\n            mstore(add(ptr, 0xa0), m)\\n\\n            // Given the result < m, it's guaranteed to fit in 32 bytes,\\n            // so we can use the memory scratch space located at offset 0.\\n            success := staticcall(gas(), 0x05, ptr, 0xc0, 0x00, 0x20)\\n            result := mload(0x00)\\n        }\\n    }\\n\\n    /**\\n     * @dev Variant of {modExp} that supports inputs of arbitrary length.\\n     */\\n    function modExp(bytes memory b, bytes memory e, bytes memory m) internal view returns (bytes memory) {\\n        (bool success, bytes memory result) = tryModExp(b, e, m);\\n        if (!success) {\\n            Panic.panic(Panic.DIVISION_BY_ZERO);\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Variant of {tryModExp} that supports inputs of arbitrary length.\\n     */\\n    function tryModExp(\\n        bytes memory b,\\n        bytes memory e,\\n        bytes memory m\\n    ) internal view returns (bool success, bytes memory result) {\\n        if (_zeroBytes(m)) return (false, new bytes(0));\\n\\n        uint256 mLen = m.length;\\n\\n        // Encode call args in result and move the free memory pointer\\n        result = abi.encodePacked(b.length, e.length, mLen, b, e, m);\\n\\n        assembly (\\\"memory-safe\\\") {\\n            let dataPtr := add(result, 0x20)\\n            // Write result on top of args to avoid allocating extra memory.\\n            success := staticcall(gas(), 0x05, dataPtr, mload(result), dataPtr, mLen)\\n            // Overwrite the length.\\n            // result.length > returndatasize() is guaranteed because returndatasize() == m.length\\n            mstore(result, mLen)\\n            // Set the memory pointer after the returned data.\\n            mstore(0x40, add(dataPtr, mLen))\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether the provided byte array is zero.\\n     */\\n    function _zeroBytes(bytes memory byteArray) private pure returns (bool) {\\n        for (uint256 i = 0; i < byteArray.length; ++i) {\\n            if (byteArray[i] != 0) {\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * This method is based on Newton's method for computing square roots; the algorithm is restricted to only\\n     * using integer operations.\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        unchecked {\\n            // Take care of easy edge cases when a == 0 or a == 1\\n            if (a <= 1) {\\n                return a;\\n            }\\n\\n            // In this function, we use Newton's method to get a root of `f(x) := x\\u00b2 - a`. It involves building a\\n            // sequence x_n that converges toward sqrt(a). For each iteration x_n, we also define the error between\\n            // the current value as `\\u03b5_n = | x_n - sqrt(a) |`.\\n            //\\n            // For our first estimation, we consider `e` the smallest power of 2 which is bigger than the square root\\n            // of the target. (i.e. `2**(e-1) \\u2264 sqrt(a) < 2**e`). We know that `e \\u2264 128` because `(2\\u00b9\\u00b2\\u2078)\\u00b2 = 2\\u00b2\\u2075\\u2076` is\\n            // bigger than any uint256.\\n            //\\n            // By noticing that\\n            // `2**(e-1) \\u2264 sqrt(a) < 2**e \\u2192 (2**(e-1))\\u00b2 \\u2264 a < (2**e)\\u00b2 \\u2192 2**(2*e-2) \\u2264 a < 2**(2*e)`\\n            // we can deduce that `e - 1` is `log2(a) / 2`. We can thus compute `x_n = 2**(e-1)` using a method similar\\n            // to the msb function.\\n            uint256 aa = a;\\n            uint256 xn = 1;\\n\\n            if (aa >= (1 << 128)) {\\n                aa >>= 128;\\n                xn <<= 64;\\n            }\\n            if (aa >= (1 << 64)) {\\n                aa >>= 64;\\n                xn <<= 32;\\n            }\\n            if (aa >= (1 << 32)) {\\n                aa >>= 32;\\n                xn <<= 16;\\n            }\\n            if (aa >= (1 << 16)) {\\n                aa >>= 16;\\n                xn <<= 8;\\n            }\\n            if (aa >= (1 << 8)) {\\n                aa >>= 8;\\n                xn <<= 4;\\n            }\\n            if (aa >= (1 << 4)) {\\n                aa >>= 4;\\n                xn <<= 2;\\n            }\\n            if (aa >= (1 << 2)) {\\n                xn <<= 1;\\n            }\\n\\n            // We now have x_n such that `x_n = 2**(e-1) \\u2264 sqrt(a) < 2**e = 2 * x_n`. This implies \\u03b5_n \\u2264 2**(e-1).\\n            //\\n            // We can refine our estimation by noticing that the middle of that interval minimizes the error.\\n            // If we move x_n to equal 2**(e-1) + 2**(e-2), then we reduce the error to \\u03b5_n \\u2264 2**(e-2).\\n            // This is going to be our x_0 (and \\u03b5_0)\\n            xn = (3 * xn) >> 1; // \\u03b5_0 := | x_0 - sqrt(a) | \\u2264 2**(e-2)\\n\\n            // From here, Newton's method give us:\\n            // x_{n+1} = (x_n + a / x_n) / 2\\n            //\\n            // One should note that:\\n            // x_{n+1}\\u00b2 - a = ((x_n + a / x_n) / 2)\\u00b2 - a\\n            //              = ((x_n\\u00b2 + a) / (2 * x_n))\\u00b2 - a\\n            //              = (x_n\\u2074 + 2 * a * x_n\\u00b2 + a\\u00b2) / (4 * x_n\\u00b2) - a\\n            //              = (x_n\\u2074 + 2 * a * x_n\\u00b2 + a\\u00b2 - 4 * a * x_n\\u00b2) / (4 * x_n\\u00b2)\\n            //              = (x_n\\u2074 - 2 * a * x_n\\u00b2 + a\\u00b2) / (4 * x_n\\u00b2)\\n            //              = (x_n\\u00b2 - a)\\u00b2 / (2 * x_n)\\u00b2\\n            //              = ((x_n\\u00b2 - a) / (2 * x_n))\\u00b2\\n            //              \\u2265 0\\n            // Which proves that for all n \\u2265 1, sqrt(a) \\u2264 x_n\\n            //\\n            // This gives us the proof of quadratic convergence of the sequence:\\n            // \\u03b5_{n+1} = | x_{n+1} - sqrt(a) |\\n            //         = | (x_n + a / x_n) / 2 - sqrt(a) |\\n            //         = | (x_n\\u00b2 + a - 2*x_n*sqrt(a)) / (2 * x_n) |\\n            //         = | (x_n - sqrt(a))\\u00b2 / (2 * x_n) |\\n            //         = | \\u03b5_n\\u00b2 / (2 * x_n) |\\n            //         = \\u03b5_n\\u00b2 / | (2 * x_n) |\\n            //\\n            // For the first iteration, we have a special case where x_0 is known:\\n            // \\u03b5_1 = \\u03b5_0\\u00b2 / | (2 * x_0) |\\n            //     \\u2264 (2**(e-2))\\u00b2 / (2 * (2**(e-1) + 2**(e-2)))\\n            //     \\u2264 2**(2*e-4) / (3 * 2**(e-1))\\n            //     \\u2264 2**(e-3) / 3\\n            //     \\u2264 2**(e-3-log2(3))\\n            //     \\u2264 2**(e-4.5)\\n            //\\n            // For the following iterations, we use the fact that, 2**(e-1) \\u2264 sqrt(a) \\u2264 x_n:\\n            // \\u03b5_{n+1} = \\u03b5_n\\u00b2 / | (2 * x_n) |\\n            //         \\u2264 (2**(e-k))\\u00b2 / (2 * 2**(e-1))\\n            //         \\u2264 2**(2*e-2*k) / 2**e\\n            //         \\u2264 2**(e-2*k)\\n            xn = (xn + a / xn) >> 1; // \\u03b5_1 := | x_1 - sqrt(a) | \\u2264 2**(e-4.5)  -- special case, see above\\n            xn = (xn + a / xn) >> 1; // \\u03b5_2 := | x_2 - sqrt(a) | \\u2264 2**(e-9)    -- general case with k = 4.5\\n            xn = (xn + a / xn) >> 1; // \\u03b5_3 := | x_3 - sqrt(a) | \\u2264 2**(e-18)   -- general case with k = 9\\n            xn = (xn + a / xn) >> 1; // \\u03b5_4 := | x_4 - sqrt(a) | \\u2264 2**(e-36)   -- general case with k = 18\\n            xn = (xn + a / xn) >> 1; // \\u03b5_5 := | x_5 - sqrt(a) | \\u2264 2**(e-72)   -- general case with k = 36\\n            xn = (xn + a / xn) >> 1; // \\u03b5_6 := | x_6 - sqrt(a) | \\u2264 2**(e-144)  -- general case with k = 72\\n\\n            // Because e \\u2264 128 (as discussed during the first estimation phase), we know have reached a precision\\n            // \\u03b5_6 \\u2264 2**(e-144) < 1. Given we're operating on integers, then we can ensure that xn is now either\\n            // sqrt(a) or sqrt(a) + 1.\\n            return xn - SafeCast.toUint(xn > a / xn);\\n        }\\n    }\\n\\n    /**\\n     * @dev Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && result * result < a);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        uint256 exp;\\n        unchecked {\\n            exp = 128 * SafeCast.toUint(value > (1 << 128) - 1);\\n            value >>= exp;\\n            result += exp;\\n\\n            exp = 64 * SafeCast.toUint(value > (1 << 64) - 1);\\n            value >>= exp;\\n            result += exp;\\n\\n            exp = 32 * SafeCast.toUint(value > (1 << 32) - 1);\\n            value >>= exp;\\n            result += exp;\\n\\n            exp = 16 * SafeCast.toUint(value > (1 << 16) - 1);\\n            value >>= exp;\\n            result += exp;\\n\\n            exp = 8 * SafeCast.toUint(value > (1 << 8) - 1);\\n            value >>= exp;\\n            result += exp;\\n\\n            exp = 4 * SafeCast.toUint(value > (1 << 4) - 1);\\n            value >>= exp;\\n            result += exp;\\n\\n            exp = 2 * SafeCast.toUint(value > (1 << 2) - 1);\\n            value >>= exp;\\n            result += exp;\\n\\n            result += SafeCast.toUint(value > 1);\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && 1 << result < value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && 10 ** result < value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        uint256 isGt;\\n        unchecked {\\n            isGt = SafeCast.toUint(value > (1 << 128) - 1);\\n            value >>= isGt * 128;\\n            result += isGt * 16;\\n\\n            isGt = SafeCast.toUint(value > (1 << 64) - 1);\\n            value >>= isGt * 64;\\n            result += isGt * 8;\\n\\n            isGt = SafeCast.toUint(value > (1 << 32) - 1);\\n            value >>= isGt * 32;\\n            result += isGt * 4;\\n\\n            isGt = SafeCast.toUint(value > (1 << 16) - 1);\\n            value >>= isGt * 16;\\n            result += isGt * 2;\\n\\n            result += SafeCast.toUint(value > (1 << 8) - 1);\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && 1 << (result << 3) < value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\",\"keccak256\":\"0xa00be322d7db5786750ce0ac7e2f5b633ac30a5ed5fa1ced1e74acfc19acecea\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/math/SafeCast.sol)\\n// This file was procedurally generated from scripts/generate/templates/SafeCast.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX/bool casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Value doesn't fit in an uint of `bits` size.\\n     */\\n    error SafeCastOverflowedUintDowncast(uint8 bits, uint256 value);\\n\\n    /**\\n     * @dev An int value doesn't fit in an uint of `bits` size.\\n     */\\n    error SafeCastOverflowedIntToUint(int256 value);\\n\\n    /**\\n     * @dev Value doesn't fit in an int of `bits` size.\\n     */\\n    error SafeCastOverflowedIntDowncast(uint8 bits, int256 value);\\n\\n    /**\\n     * @dev An uint value doesn't fit in an int of `bits` size.\\n     */\\n    error SafeCastOverflowedUintToInt(uint256 value);\\n\\n    /**\\n     * @dev Returns the downcasted uint248 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint248).\\n     *\\n     * Counterpart to Solidity's `uint248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     */\\n    function toUint248(uint256 value) internal pure returns (uint248) {\\n        if (value > type(uint248).max) {\\n            revert SafeCastOverflowedUintDowncast(248, value);\\n        }\\n        return uint248(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint240 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint240).\\n     *\\n     * Counterpart to Solidity's `uint240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     */\\n    function toUint240(uint256 value) internal pure returns (uint240) {\\n        if (value > type(uint240).max) {\\n            revert SafeCastOverflowedUintDowncast(240, value);\\n        }\\n        return uint240(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint232 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint232).\\n     *\\n     * Counterpart to Solidity's `uint232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     */\\n    function toUint232(uint256 value) internal pure returns (uint232) {\\n        if (value > type(uint232).max) {\\n            revert SafeCastOverflowedUintDowncast(232, value);\\n        }\\n        return uint232(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        if (value > type(uint224).max) {\\n            revert SafeCastOverflowedUintDowncast(224, value);\\n        }\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint216 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint216).\\n     *\\n     * Counterpart to Solidity's `uint216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     */\\n    function toUint216(uint256 value) internal pure returns (uint216) {\\n        if (value > type(uint216).max) {\\n            revert SafeCastOverflowedUintDowncast(216, value);\\n        }\\n        return uint216(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint208 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint208).\\n     *\\n     * Counterpart to Solidity's `uint208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     */\\n    function toUint208(uint256 value) internal pure returns (uint208) {\\n        if (value > type(uint208).max) {\\n            revert SafeCastOverflowedUintDowncast(208, value);\\n        }\\n        return uint208(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint200 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint200).\\n     *\\n     * Counterpart to Solidity's `uint200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     */\\n    function toUint200(uint256 value) internal pure returns (uint200) {\\n        if (value > type(uint200).max) {\\n            revert SafeCastOverflowedUintDowncast(200, value);\\n        }\\n        return uint200(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint192 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint192).\\n     *\\n     * Counterpart to Solidity's `uint192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     */\\n    function toUint192(uint256 value) internal pure returns (uint192) {\\n        if (value > type(uint192).max) {\\n            revert SafeCastOverflowedUintDowncast(192, value);\\n        }\\n        return uint192(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint184 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint184).\\n     *\\n     * Counterpart to Solidity's `uint184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     */\\n    function toUint184(uint256 value) internal pure returns (uint184) {\\n        if (value > type(uint184).max) {\\n            revert SafeCastOverflowedUintDowncast(184, value);\\n        }\\n        return uint184(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint176 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint176).\\n     *\\n     * Counterpart to Solidity's `uint176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     */\\n    function toUint176(uint256 value) internal pure returns (uint176) {\\n        if (value > type(uint176).max) {\\n            revert SafeCastOverflowedUintDowncast(176, value);\\n        }\\n        return uint176(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint168 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint168).\\n     *\\n     * Counterpart to Solidity's `uint168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     */\\n    function toUint168(uint256 value) internal pure returns (uint168) {\\n        if (value > type(uint168).max) {\\n            revert SafeCastOverflowedUintDowncast(168, value);\\n        }\\n        return uint168(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint160 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint160).\\n     *\\n     * Counterpart to Solidity's `uint160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     */\\n    function toUint160(uint256 value) internal pure returns (uint160) {\\n        if (value > type(uint160).max) {\\n            revert SafeCastOverflowedUintDowncast(160, value);\\n        }\\n        return uint160(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint152 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint152).\\n     *\\n     * Counterpart to Solidity's `uint152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     */\\n    function toUint152(uint256 value) internal pure returns (uint152) {\\n        if (value > type(uint152).max) {\\n            revert SafeCastOverflowedUintDowncast(152, value);\\n        }\\n        return uint152(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint144 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint144).\\n     *\\n     * Counterpart to Solidity's `uint144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     */\\n    function toUint144(uint256 value) internal pure returns (uint144) {\\n        if (value > type(uint144).max) {\\n            revert SafeCastOverflowedUintDowncast(144, value);\\n        }\\n        return uint144(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint136 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint136).\\n     *\\n     * Counterpart to Solidity's `uint136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     */\\n    function toUint136(uint256 value) internal pure returns (uint136) {\\n        if (value > type(uint136).max) {\\n            revert SafeCastOverflowedUintDowncast(136, value);\\n        }\\n        return uint136(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        if (value > type(uint128).max) {\\n            revert SafeCastOverflowedUintDowncast(128, value);\\n        }\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint120 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint120).\\n     *\\n     * Counterpart to Solidity's `uint120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     */\\n    function toUint120(uint256 value) internal pure returns (uint120) {\\n        if (value > type(uint120).max) {\\n            revert SafeCastOverflowedUintDowncast(120, value);\\n        }\\n        return uint120(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint112 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint112).\\n     *\\n     * Counterpart to Solidity's `uint112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     */\\n    function toUint112(uint256 value) internal pure returns (uint112) {\\n        if (value > type(uint112).max) {\\n            revert SafeCastOverflowedUintDowncast(112, value);\\n        }\\n        return uint112(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint104 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint104).\\n     *\\n     * Counterpart to Solidity's `uint104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     */\\n    function toUint104(uint256 value) internal pure returns (uint104) {\\n        if (value > type(uint104).max) {\\n            revert SafeCastOverflowedUintDowncast(104, value);\\n        }\\n        return uint104(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        if (value > type(uint96).max) {\\n            revert SafeCastOverflowedUintDowncast(96, value);\\n        }\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint88 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint88).\\n     *\\n     * Counterpart to Solidity's `uint88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     */\\n    function toUint88(uint256 value) internal pure returns (uint88) {\\n        if (value > type(uint88).max) {\\n            revert SafeCastOverflowedUintDowncast(88, value);\\n        }\\n        return uint88(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint80 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint80).\\n     *\\n     * Counterpart to Solidity's `uint80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     */\\n    function toUint80(uint256 value) internal pure returns (uint80) {\\n        if (value > type(uint80).max) {\\n            revert SafeCastOverflowedUintDowncast(80, value);\\n        }\\n        return uint80(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint72 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint72).\\n     *\\n     * Counterpart to Solidity's `uint72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     */\\n    function toUint72(uint256 value) internal pure returns (uint72) {\\n        if (value > type(uint72).max) {\\n            revert SafeCastOverflowedUintDowncast(72, value);\\n        }\\n        return uint72(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        if (value > type(uint64).max) {\\n            revert SafeCastOverflowedUintDowncast(64, value);\\n        }\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint56 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint56).\\n     *\\n     * Counterpart to Solidity's `uint56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     */\\n    function toUint56(uint256 value) internal pure returns (uint56) {\\n        if (value > type(uint56).max) {\\n            revert SafeCastOverflowedUintDowncast(56, value);\\n        }\\n        return uint56(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint48 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint48).\\n     *\\n     * Counterpart to Solidity's `uint48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     */\\n    function toUint48(uint256 value) internal pure returns (uint48) {\\n        if (value > type(uint48).max) {\\n            revert SafeCastOverflowedUintDowncast(48, value);\\n        }\\n        return uint48(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint40 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint40).\\n     *\\n     * Counterpart to Solidity's `uint40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     */\\n    function toUint40(uint256 value) internal pure returns (uint40) {\\n        if (value > type(uint40).max) {\\n            revert SafeCastOverflowedUintDowncast(40, value);\\n        }\\n        return uint40(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        if (value > type(uint32).max) {\\n            revert SafeCastOverflowedUintDowncast(32, value);\\n        }\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint24 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint24).\\n     *\\n     * Counterpart to Solidity's `uint24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     */\\n    function toUint24(uint256 value) internal pure returns (uint24) {\\n        if (value > type(uint24).max) {\\n            revert SafeCastOverflowedUintDowncast(24, value);\\n        }\\n        return uint24(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        if (value > type(uint16).max) {\\n            revert SafeCastOverflowedUintDowncast(16, value);\\n        }\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        if (value > type(uint8).max) {\\n            revert SafeCastOverflowedUintDowncast(8, value);\\n        }\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        if (value < 0) {\\n            revert SafeCastOverflowedIntToUint(value);\\n        }\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int248 from int256, reverting on\\n     * overflow (when the input is less than smallest int248 or\\n     * greater than largest int248).\\n     *\\n     * Counterpart to Solidity's `int248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     */\\n    function toInt248(int256 value) internal pure returns (int248 downcasted) {\\n        downcasted = int248(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(248, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int240 from int256, reverting on\\n     * overflow (when the input is less than smallest int240 or\\n     * greater than largest int240).\\n     *\\n     * Counterpart to Solidity's `int240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     */\\n    function toInt240(int256 value) internal pure returns (int240 downcasted) {\\n        downcasted = int240(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(240, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int232 from int256, reverting on\\n     * overflow (when the input is less than smallest int232 or\\n     * greater than largest int232).\\n     *\\n     * Counterpart to Solidity's `int232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     */\\n    function toInt232(int256 value) internal pure returns (int232 downcasted) {\\n        downcasted = int232(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(232, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int224 from int256, reverting on\\n     * overflow (when the input is less than smallest int224 or\\n     * greater than largest int224).\\n     *\\n     * Counterpart to Solidity's `int224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toInt224(int256 value) internal pure returns (int224 downcasted) {\\n        downcasted = int224(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(224, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int216 from int256, reverting on\\n     * overflow (when the input is less than smallest int216 or\\n     * greater than largest int216).\\n     *\\n     * Counterpart to Solidity's `int216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     */\\n    function toInt216(int256 value) internal pure returns (int216 downcasted) {\\n        downcasted = int216(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(216, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int208 from int256, reverting on\\n     * overflow (when the input is less than smallest int208 or\\n     * greater than largest int208).\\n     *\\n     * Counterpart to Solidity's `int208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     */\\n    function toInt208(int256 value) internal pure returns (int208 downcasted) {\\n        downcasted = int208(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(208, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int200 from int256, reverting on\\n     * overflow (when the input is less than smallest int200 or\\n     * greater than largest int200).\\n     *\\n     * Counterpart to Solidity's `int200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     */\\n    function toInt200(int256 value) internal pure returns (int200 downcasted) {\\n        downcasted = int200(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(200, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int192 from int256, reverting on\\n     * overflow (when the input is less than smallest int192 or\\n     * greater than largest int192).\\n     *\\n     * Counterpart to Solidity's `int192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     */\\n    function toInt192(int256 value) internal pure returns (int192 downcasted) {\\n        downcasted = int192(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(192, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int184 from int256, reverting on\\n     * overflow (when the input is less than smallest int184 or\\n     * greater than largest int184).\\n     *\\n     * Counterpart to Solidity's `int184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     */\\n    function toInt184(int256 value) internal pure returns (int184 downcasted) {\\n        downcasted = int184(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(184, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int176 from int256, reverting on\\n     * overflow (when the input is less than smallest int176 or\\n     * greater than largest int176).\\n     *\\n     * Counterpart to Solidity's `int176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     */\\n    function toInt176(int256 value) internal pure returns (int176 downcasted) {\\n        downcasted = int176(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(176, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int168 from int256, reverting on\\n     * overflow (when the input is less than smallest int168 or\\n     * greater than largest int168).\\n     *\\n     * Counterpart to Solidity's `int168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     */\\n    function toInt168(int256 value) internal pure returns (int168 downcasted) {\\n        downcasted = int168(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(168, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int160 from int256, reverting on\\n     * overflow (when the input is less than smallest int160 or\\n     * greater than largest int160).\\n     *\\n     * Counterpart to Solidity's `int160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     */\\n    function toInt160(int256 value) internal pure returns (int160 downcasted) {\\n        downcasted = int160(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(160, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int152 from int256, reverting on\\n     * overflow (when the input is less than smallest int152 or\\n     * greater than largest int152).\\n     *\\n     * Counterpart to Solidity's `int152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     */\\n    function toInt152(int256 value) internal pure returns (int152 downcasted) {\\n        downcasted = int152(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(152, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int144 from int256, reverting on\\n     * overflow (when the input is less than smallest int144 or\\n     * greater than largest int144).\\n     *\\n     * Counterpart to Solidity's `int144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     */\\n    function toInt144(int256 value) internal pure returns (int144 downcasted) {\\n        downcasted = int144(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(144, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int136 from int256, reverting on\\n     * overflow (when the input is less than smallest int136 or\\n     * greater than largest int136).\\n     *\\n     * Counterpart to Solidity's `int136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     */\\n    function toInt136(int256 value) internal pure returns (int136 downcasted) {\\n        downcasted = int136(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(136, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toInt128(int256 value) internal pure returns (int128 downcasted) {\\n        downcasted = int128(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(128, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int120 from int256, reverting on\\n     * overflow (when the input is less than smallest int120 or\\n     * greater than largest int120).\\n     *\\n     * Counterpart to Solidity's `int120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     */\\n    function toInt120(int256 value) internal pure returns (int120 downcasted) {\\n        downcasted = int120(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(120, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int112 from int256, reverting on\\n     * overflow (when the input is less than smallest int112 or\\n     * greater than largest int112).\\n     *\\n     * Counterpart to Solidity's `int112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     */\\n    function toInt112(int256 value) internal pure returns (int112 downcasted) {\\n        downcasted = int112(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(112, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int104 from int256, reverting on\\n     * overflow (when the input is less than smallest int104 or\\n     * greater than largest int104).\\n     *\\n     * Counterpart to Solidity's `int104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     */\\n    function toInt104(int256 value) internal pure returns (int104 downcasted) {\\n        downcasted = int104(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(104, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int96 from int256, reverting on\\n     * overflow (when the input is less than smallest int96 or\\n     * greater than largest int96).\\n     *\\n     * Counterpart to Solidity's `int96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toInt96(int256 value) internal pure returns (int96 downcasted) {\\n        downcasted = int96(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(96, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int88 from int256, reverting on\\n     * overflow (when the input is less than smallest int88 or\\n     * greater than largest int88).\\n     *\\n     * Counterpart to Solidity's `int88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     */\\n    function toInt88(int256 value) internal pure returns (int88 downcasted) {\\n        downcasted = int88(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(88, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int80 from int256, reverting on\\n     * overflow (when the input is less than smallest int80 or\\n     * greater than largest int80).\\n     *\\n     * Counterpart to Solidity's `int80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     */\\n    function toInt80(int256 value) internal pure returns (int80 downcasted) {\\n        downcasted = int80(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(80, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int72 from int256, reverting on\\n     * overflow (when the input is less than smallest int72 or\\n     * greater than largest int72).\\n     *\\n     * Counterpart to Solidity's `int72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     */\\n    function toInt72(int256 value) internal pure returns (int72 downcasted) {\\n        downcasted = int72(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(72, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toInt64(int256 value) internal pure returns (int64 downcasted) {\\n        downcasted = int64(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(64, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int56 from int256, reverting on\\n     * overflow (when the input is less than smallest int56 or\\n     * greater than largest int56).\\n     *\\n     * Counterpart to Solidity's `int56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     */\\n    function toInt56(int256 value) internal pure returns (int56 downcasted) {\\n        downcasted = int56(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(56, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int48 from int256, reverting on\\n     * overflow (when the input is less than smallest int48 or\\n     * greater than largest int48).\\n     *\\n     * Counterpart to Solidity's `int48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     */\\n    function toInt48(int256 value) internal pure returns (int48 downcasted) {\\n        downcasted = int48(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(48, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int40 from int256, reverting on\\n     * overflow (when the input is less than smallest int40 or\\n     * greater than largest int40).\\n     *\\n     * Counterpart to Solidity's `int40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     */\\n    function toInt40(int256 value) internal pure returns (int40 downcasted) {\\n        downcasted = int40(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(40, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toInt32(int256 value) internal pure returns (int32 downcasted) {\\n        downcasted = int32(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(32, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int24 from int256, reverting on\\n     * overflow (when the input is less than smallest int24 or\\n     * greater than largest int24).\\n     *\\n     * Counterpart to Solidity's `int24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     */\\n    function toInt24(int256 value) internal pure returns (int24 downcasted) {\\n        downcasted = int24(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(24, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toInt16(int256 value) internal pure returns (int16 downcasted) {\\n        downcasted = int16(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(16, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     */\\n    function toInt8(int256 value) internal pure returns (int8 downcasted) {\\n        downcasted = int8(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(8, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        if (value > uint256(type(int256).max)) {\\n            revert SafeCastOverflowedUintToInt(value);\\n        }\\n        return int256(value);\\n    }\\n\\n    /**\\n     * @dev Cast a boolean (false or true) to a uint256 (0 or 1) with no jump.\\n     */\\n    function toUint(bool b) internal pure returns (uint256 u) {\\n        assembly (\\\"memory-safe\\\") {\\n            u := iszero(iszero(b))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x195533c86d0ef72bcc06456a4f66a9b941f38eb403739b00f21fd7c1abd1ae54\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {SafeCast} from \\\"./SafeCast.sol\\\";\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Branchless ternary evaluation for `a ? b : c`. Gas costs are constant.\\n     *\\n     * IMPORTANT: This function may reduce bytecode size and consume less gas when used standalone.\\n     * However, the compiler may optimize Solidity ternary operations (i.e. `a ? b : c`) to only compute\\n     * one branch when needed, making this function more expensive.\\n     */\\n    function ternary(bool condition, int256 a, int256 b) internal pure returns (int256) {\\n        unchecked {\\n            // branchless ternary works because:\\n            // b ^ (a ^ b) == a\\n            // b ^ 0 == b\\n            return b ^ ((a ^ b) * int256(SafeCast.toUint(condition)));\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return ternary(a > b, a, b);\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return ternary(a < b, a, b);\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // Formula from the \\\"Bit Twiddling Hacks\\\" by Sean Eron Anderson.\\n            // Since `n` is a signed integer, the generated bytecode will use the SAR opcode to perform the right shift,\\n            // taking advantage of the most significant (or \\\"sign\\\" bit) in two's complement representation.\\n            // This opcode adds new most significant bits set to the value of the previous most significant bit. As a result,\\n            // the mask will either be `bytes32(0)` (if n is positive) or `~bytes32(0)` (if n is negative).\\n            int256 mask = n >> 255;\\n\\n            // A `bytes32(0)` mask leaves the input unchanged, while a `~bytes32(0)` mask complements it.\\n            return uint256((n + mask) ^ mask);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb1970fac7b64e6c09611e6691791e848d5e3fe410fa5899e7df2e0afd77a99e3\",\"license\":\"MIT\"},\"contracts/0_originForge/ofTokenCurveFacet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {modifiersFacet} from \\\"../shared/utils/modifiersFacet.sol\\\";\\nimport {ReentrancyGuard} from \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {IERC20Metadata} from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {Math} from \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport {SafeCast} from \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\n\\ninterface IOriginForgeToken {\\n    function buy(address _to,uint256 _amount) external;\\n    function sell(address _to, uint256 _amount) external;\\n}\\n\\ncontract ofTokenCurveFacet is modifiersFacet, ReentrancyGuard{\\n    using SafeERC20 for IERC20;\\n    using SafeCast for uint256;\\n    \\n    uint256 private constant TRADE_FEE = 100; // 1%\\n    uint256 private constant FEE_DENOMINATOR = 10000; // 100%\\n\\n    uint256 public ofTokenCurveSupply;\\n    uint256 public ofTokenCurveMaxSupply;\\n\\n    struct BondStep {\\n        uint256 rangeTo;\\n        uint256 price;\\n    }\\n\\n    struct Trade {\\n        uint256 tradeId;\\n        bool tradeType; // true: mint, false: burn\\n        address user;\\n        string nickname;\\n        uint256 inputAmount;\\n        uint256 outputAmount;\\n        uint256 tradeTime;\\n    }\\n\\n    uint256 public tradeCount;\\n    BondStep[] public bondSteps;\\n    mapping(uint256 => Trade) public tradeHistory;\\n    \\n    event BC_Mint(\\n        address indexed user,\\n        uint256 inputAmount,\\n        uint256 mintedAmount,\\n        uint256 tradeFeeAmount,\\n        uint256 timestamp\\n    );\\n\\n    event BC_Burn(\\n        address indexed user,\\n        uint256 burnAmount,\\n        uint256 tradeFeeAmount,\\n        uint256 refundAmount,\\n        uint256 timestamp\\n    );\\n\\n    uint256 public tradeFee = 100; // 1% default\\n    \\n\\n    function bc_set_steps(BondStep[] memory _bondSteps) public onlyAdmin{\\n        bondSteps = _bondSteps;\\n    }\\n\\n    function bc_mint() public payable nonReentrant returns (uint256) {\\n        (uint256 actualPaymentAmount, uint256 bondTokenAmount, uint256 feeAmount) = bc_estimate_mint_for_token(msg.value);\\n\\n        require(msg.value >= actualPaymentAmount, \\\"Insufficient payment\\\");\\n        require(bondTokenAmount > 0, \\\"No bond tokens minted\\\");\\n\\n        address bank = s.contractAddresses['bank'];\\n        require(bank != address(0), \\\"Invalid bank address\\\");\\n\\n        (bool feeSuccess, ) = bank.call{value: feeAmount}(\\\"\\\");\\n        require(feeSuccess, \\\"Failed to send fee to bank\\\");\\n        \\n        ofTokenCurveSupply += bondTokenAmount;\\n        \\n        IOriginForgeToken(s.contractAddresses['ofToken']).buy(msg.sender, bondTokenAmount);\\n\\n        tradeCount++;\\n        tradeHistory[tradeCount] = Trade({\\n            tradeId: tradeCount,\\n            tradeType: true, // mint\\n            user: msg.sender,\\n            nickname: s.usersByAddress[msg.sender].nickname,\\n            inputAmount: msg.value,\\n            outputAmount: bondTokenAmount,\\n            tradeTime: block.timestamp\\n        });\\n\\n        emit BC_Mint(msg.sender, msg.value, bondTokenAmount, feeAmount, block.timestamp);\\n        return bondTokenAmount;\\n    }\\n\\n    function bc_burn(uint256 _amount, uint256 _minRefundExpected) public nonReentrant returns (uint256) {\\n        require(_amount > 0, \\\"Amount must be greater than 0\\\");\\n        require(ofTokenCurveSupply >= _amount, \\\"Insufficient supply\\\");\\n        \\n        address ofTokenAddress = s.contractAddresses['ofToken'];\\n        address bank = s.contractAddresses['bank'];\\n        require(ofTokenAddress != address(0) && bank != address(0), \\\"Invalid addresses\\\");\\n\\n        uint256 tradeFeeInToken = (_amount * tradeFee) / FEE_DENOMINATOR;\\n        uint256 actualBurnAmount = _amount - tradeFeeInToken;\\n\\n        uint256 refundAmount = bc_estimate_burn_for_token(actualBurnAmount);\\n        require(refundAmount > 0, \\\"No refund amount\\\");\\n        require(refundAmount >= _minRefundExpected, \\\"Refund amount too low\\\");\\n        \\n        require(address(this).balance >= refundAmount, \\\"Insufficient contract balance\\\");\\n\\n        IOriginForgeToken(s.contractAddresses['ofToken']).sell(msg.sender, _amount);\\n        ofTokenCurveSupply -= _amount;\\n\\n        tradeCount++;\\n        tradeHistory[tradeCount] = Trade({\\n            tradeId: tradeCount,\\n            tradeType: false, // burn\\n            user: msg.sender,\\n            nickname: s.usersByAddress[msg.sender].nickname,\\n            inputAmount: _amount,\\n            outputAmount: refundAmount,\\n            tradeTime: block.timestamp\\n        });\\n\\n        IERC20(ofTokenAddress).safeTransferFrom(msg.sender, address(this), _amount);\\n        \\n        IERC20(ofTokenAddress).safeTransfer(bank, tradeFeeInToken);\\n        \\n        IERC20(ofTokenAddress).safeTransfer(address(0), actualBurnAmount);\\n\\n        (bool success, ) = msg.sender.call{value: refundAmount}(\\\"\\\");\\n        require(success, \\\"Failed to send refund\\\");\\n\\n        emit BC_Burn(\\n            msg.sender,\\n            _amount,\\n            tradeFeeInToken,\\n            refundAmount,\\n            block.timestamp\\n        );\\n\\n        return refundAmount;\\n    }\\n\\n    function bc_estimate_mint_for_token(uint256 _amount) public view returns (uint256 actualPaymentAmount, uint256 bondTokenAmount, uint256 feeAmount){\\n        BondStep[] memory steps = bondSteps;\\n        uint256 currentSupply = ofTokenCurveSupply;\\n\\n        \\n        feeAmount = Math.ceilDiv(_amount * TRADE_FEE, FEE_DENOMINATOR);\\n        uint256 reserveLeft = _amount - feeAmount;\\n\\n        uint initialReserve = reserveLeft;\\n    \\n        bondTokenAmount = 0;\\n\\n        for(uint256 i = getCurrentStep(); i < steps.length; ++i){\\n            uint256 price = steps[i].price;\\n            uint256 supplyLeft = steps[i].rangeTo - currentSupply;\\n\\n            if(price == 0) continue;\\n\\n            uint256 tokensInStep;\\n            {\\n                if(price > 0) {\\n                    tokensInStep = Math.ceilDiv(reserveLeft * 1e18, price);\\n                } else {\\n                    continue;\\n                }\\n            }\\n\\n            if(tokensInStep > supplyLeft){\\n                if(supplyLeft == 0) continue;\\n             \\n                bondTokenAmount += supplyLeft;\\n                uint256 usedReserve = Math.ceilDiv(supplyLeft * price, 1e18);\\n\\n                if(usedReserve <= reserveLeft){\\n                    reserveLeft -= usedReserve;\\n                    currentSupply += supplyLeft;\\n                } else {\\n                    uint256 maxTokens = Math.ceilDiv(reserveLeft * 1e18, price);\\n                    bondTokenAmount += maxTokens;\\n                    currentSupply += maxTokens;\\n                    reserveLeft = 0;\\n                    break;\\n                }\\n            }  else {\\n                bondTokenAmount += tokensInStep;\\n                currentSupply += tokensInStep;\\n                reserveLeft = 0;\\n                break;\\n            }\\n\\n            if(currentSupply > ofTokenCurveMaxSupply) {\\n                uint256 excess = currentSupply - ofTokenCurveMaxSupply;\\n                bondTokenAmount -= excess;\\n                currentSupply = ofTokenCurveMaxSupply;\\n\\n                reserveLeft = initialReserve - Math.ceilDiv(bondTokenAmount * price, 1e18);\\n                break;\\n            }\\n        }\\n    \\n        uint256 _usedReserve = initialReserve - reserveLeft;\\n        actualPaymentAmount = _usedReserve + tradeFee;\\n\\n        return (actualPaymentAmount, bondTokenAmount, tradeFee);\\n    }\\n\\n    function bc_estimate_burn_for_token(uint256 _amount) public view returns (uint256) {\\n        require(_amount <= ofTokenCurveSupply, \\\"Amount exceeds supply\\\");\\n        \\n        uint256 currentSupply = ofTokenCurveSupply;\\n        uint256 refundAmount = 0;\\n        uint256 remainingTokens = _amount;\\n        \\n        for(uint256 i = getCurrentStep(); i >= 0 && remainingTokens > 0; i--) {\\n            uint256 supplyInStep;\\n            if(i == 0) {\\n                supplyInStep = currentSupply;\\n            } else {\\n                supplyInStep = currentSupply - bondSteps[i-1].rangeTo;\\n            }\\n                \\n            uint256 tokensToProcess = remainingTokens < supplyInStep ? remainingTokens : supplyInStep;\\n            refundAmount += (tokensToProcess * bondSteps[i].price) / 1e18;\\n            \\n            remainingTokens -= tokensToProcess;\\n            currentSupply -= tokensToProcess;\\n            \\n            if(i == 0) break;\\n        }\\n        \\n        return refundAmount;\\n    }\\n\\n    \\n\\n    function getCurrentStep() public view returns(uint256 step){\\n        for(uint256 i = 0; i < bondSteps.length; i++){\\n            if( ofTokenCurveSupply <= bondSteps[i].rangeTo ){\\n                return i;\\n            }\\n        }\\n    }\\n\\n    \\n\\n\\n    // front call\\n\\n    function bc_get_trade_history_byPage(uint256 _page, uint256 _TRADES_PER_PAGE) public view returns (\\n        Trade[] memory trades,\\n        uint256 currentPage,\\n        uint256 totalPages\\n    ) {\\n        require(_page > 0, \\\"Page must be greater than 0\\\");\\n        \\n        totalPages = (tradeCount + _TRADES_PER_PAGE - 1) / _TRADES_PER_PAGE;\\n        require(_page <= totalPages, \\\"Page exceeds total pages\\\");\\n        \\n        currentPage = _page;\\n        \\n        uint256 startIndex = (_page - 1) * _TRADES_PER_PAGE;\\n        uint256 endIndex = Math.min(startIndex + _TRADES_PER_PAGE - 1, tradeCount - 1);\\n        \\n        // \\ud604\\uc7ac \\ud398\\uc774\\uc9c0\\uc758 \\uac70\\ub798 \\ub0b4\\uc5ed \\uc870\\ud68c\\n        uint256 size = endIndex - startIndex + 1;\\n        trades = new Trade[](size);\\n        \\n        for (uint256 i = 0; i < size; i++) {\\n            trades[i] = tradeHistory[tradeCount - 1 - (startIndex + i)];\\n        }\\n        \\n        return (trades, currentPage, totalPages);\\n    }\\n\\n    // \\uc804\\uccb4 \\ud398\\uc774\\uc9c0 \\uc218\\ub97c \\uc870\\ud68c\\ud558\\ub294 \\ud568\\uc218\\n    function bc_get_total_pages(uint256 _TRADES_PER_PAGE) public view returns (uint256) {\\n        return (tradeCount + _TRADES_PER_PAGE - 1) / _TRADES_PER_PAGE;\\n    }\\n\\n    // \\uad00\\ub9ac\\uc790\\uc6a9 \\uc218\\uc218\\ub8cc \\uc124\\uc815 \\ud568\\uc218\\n    function setTradeFee(uint256 _newFee) external onlyAdmin {\\n        require(_newFee < FEE_DENOMINATOR, \\\"Fee too high\\\");\\n        tradeFee = _newFee;\\n    }\\n\\n\\n    \\n\\n}\",\"keccak256\":\"0x37355e92d817f60cf29e2070bc646d06035d626c6937e54e3f1e44d0685dfe07\",\"license\":\"MIT\"},\"contracts/shared/interfaces/IDiamondCut.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\n\\ninterface IDiamondCut {\\n    enum FacetCutAction {Add, Replace, Remove}\\n    // Add=0, Replace=1, Remove=2\\n\\n    struct FacetCut {\\n        address facetAddress;\\n        FacetCutAction action;\\n        bytes4[] functionSelectors;\\n    }\\n\\n    /// @notice Add/replace/remove any number of functions and optionally execute\\n    ///         a function with delegatecall\\n    /// @param _diamondCut Contains the facet addresses and function selectors\\n    /// @param _init The address of the contract or facet to execute _calldata\\n    /// @param _calldata A function call, including function selector and arguments\\n    ///                  _calldata is executed with delegatecall on _init\\n    function diamondCut(\\n        FacetCut[] calldata _diamondCut,\\n        address _init,\\n        bytes calldata _calldata\\n    ) external;\\n\\n    event DiamondCut(FacetCut[] _diamondCut, address _init, bytes _calldata);\\n}\\n\",\"keccak256\":\"0xc00c16bfa30a3fa5f3dc684f7f8ba62c259962b25f647d9588739458989717fc\",\"license\":\"MIT\"},\"contracts/shared/libraries/LibDiamond.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\nimport { IDiamondCut } from \\\"../interfaces/IDiamondCut.sol\\\";\\n\\n// Remember to add the loupe functions from DiamondLoupeFacet to the diamond.\\n// The loupe functions are required by the EIP2535 Diamonds standard\\n\\nerror InitializationFunctionReverted(address _initializationContractAddress, bytes _calldata);\\n\\nlibrary LibDiamond {\\n    bytes32 constant DIAMOND_STORAGE_POSITION = keccak256(\\\"diamond.standard.diamond.storage\\\");\\n\\n    struct FacetAddressAndPosition {\\n        address facetAddress;\\n        uint96 functionSelectorPosition; // position in facetFunctionSelectors.functionSelectors array\\n    }\\n\\n    struct FacetFunctionSelectors {\\n        bytes4[] functionSelectors;\\n        uint256 facetAddressPosition; // position of facetAddress in facetAddresses array\\n    }\\n\\n    struct DiamondStorage {\\n        // maps function selector to the facet address and\\n        // the position of the selector in the facetFunctionSelectors.selectors array\\n        mapping(bytes4 => FacetAddressAndPosition) selectorToFacetAndPosition;\\n        // maps facet addresses to function selectors\\n        mapping(address => FacetFunctionSelectors) facetFunctionSelectors;\\n        // facet addresses\\n        address[] facetAddresses;\\n        // Used to query if a contract implements an interface.\\n        // Used to implement ERC-165.\\n        mapping(bytes4 => bool) supportedInterfaces;\\n        // owner of the contract\\n        address contractOwner;\\n    }\\n\\n    function diamondStorage() internal pure returns (DiamondStorage storage ds) {\\n        bytes32 position = DIAMOND_STORAGE_POSITION;\\n        assembly {\\n            ds.slot := position\\n        }\\n    }\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    function setContractOwner(address _newOwner) internal {\\n        DiamondStorage storage ds = diamondStorage();\\n        address previousOwner = ds.contractOwner;\\n        ds.contractOwner = _newOwner;\\n        emit OwnershipTransferred(previousOwner, _newOwner);\\n    }\\n\\n    function contractOwner() internal view returns (address contractOwner_) {\\n        contractOwner_ = diamondStorage().contractOwner;\\n    }\\n\\n    function enforceIsContractOwner() internal view {\\n        require(msg.sender == diamondStorage().contractOwner, \\\"LibDiamond: Must be contract owner\\\");\\n    }\\n\\n    event DiamondCut(IDiamondCut.FacetCut[] _diamondCut, address _init, bytes _calldata);\\n\\n    // Internal function version of diamondCut\\n    function diamondCut(\\n        IDiamondCut.FacetCut[] memory _diamondCut,\\n        address _init,\\n        bytes memory _calldata\\n    ) internal {\\n        for (uint256 facetIndex; facetIndex < _diamondCut.length; facetIndex++) {\\n            IDiamondCut.FacetCutAction action = _diamondCut[facetIndex].action;\\n            if (action == IDiamondCut.FacetCutAction.Add) {\\n                addFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n            } else if (action == IDiamondCut.FacetCutAction.Replace) {\\n                replaceFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n            } else if (action == IDiamondCut.FacetCutAction.Remove) {\\n                removeFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n            } else {\\n                revert(\\\"LibDiamondCut: Incorrect FacetCutAction\\\");\\n            }\\n        }\\n        emit DiamondCut(_diamondCut, _init, _calldata);\\n        initializeDiamondCut(_init, _calldata);\\n    }\\n\\n    function addFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n        require(_functionSelectors.length > 0, \\\"LibDiamondCut: No selectors in facet to cut\\\");\\n        DiamondStorage storage ds = diamondStorage();        \\n        require(_facetAddress != address(0), \\\"LibDiamondCut: Add facet can't be address(0)\\\");\\n        uint96 selectorPosition = uint96(ds.facetFunctionSelectors[_facetAddress].functionSelectors.length);\\n        // add new facet address if it does not exist\\n        if (selectorPosition == 0) {\\n            addFacet(ds, _facetAddress);            \\n        }\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\n            require(oldFacetAddress == address(0), \\\"LibDiamondCut: Can't add function that already exists\\\");\\n            addFunction(ds, selector, selectorPosition, _facetAddress);\\n            selectorPosition++;\\n        }\\n    }\\n\\n    function replaceFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n        require(_functionSelectors.length > 0, \\\"LibDiamondCut: No selectors in facet to cut\\\");\\n        DiamondStorage storage ds = diamondStorage();\\n        require(_facetAddress != address(0), \\\"LibDiamondCut: Add facet can't be address(0)\\\");\\n        uint96 selectorPosition = uint96(ds.facetFunctionSelectors[_facetAddress].functionSelectors.length);\\n        // add new facet address if it does not exist\\n        if (selectorPosition == 0) {\\n            addFacet(ds, _facetAddress);\\n        }\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\n            require(oldFacetAddress != _facetAddress, \\\"LibDiamondCut: Can't replace function with same function\\\");\\n            removeFunction(ds, oldFacetAddress, selector);\\n            addFunction(ds, selector, selectorPosition, _facetAddress);\\n            selectorPosition++;\\n        }\\n    }\\n\\n    function removeFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n        require(_functionSelectors.length > 0, \\\"LibDiamondCut: No selectors in facet to cut\\\");\\n        DiamondStorage storage ds = diamondStorage();\\n        // if function does not exist then do nothing and return\\n        require(_facetAddress == address(0), \\\"LibDiamondCut: Remove facet address must be address(0)\\\");\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\n            removeFunction(ds, oldFacetAddress, selector);\\n        }\\n    }\\n\\n    function addFacet(DiamondStorage storage ds, address _facetAddress) internal {\\n        enforceHasContractCode(_facetAddress, \\\"LibDiamondCut: New facet has no code\\\");\\n        ds.facetFunctionSelectors[_facetAddress].facetAddressPosition = ds.facetAddresses.length;\\n        ds.facetAddresses.push(_facetAddress);\\n    }    \\n\\n\\n    function addFunction(DiamondStorage storage ds, bytes4 _selector, uint96 _selectorPosition, address _facetAddress) internal {\\n        ds.selectorToFacetAndPosition[_selector].functionSelectorPosition = _selectorPosition;\\n        ds.facetFunctionSelectors[_facetAddress].functionSelectors.push(_selector);\\n        ds.selectorToFacetAndPosition[_selector].facetAddress = _facetAddress;\\n    }\\n\\n    function removeFunction(DiamondStorage storage ds, address _facetAddress, bytes4 _selector) internal {        \\n        require(_facetAddress != address(0), \\\"LibDiamondCut: Can't remove function that doesn't exist\\\");\\n        // an immutable function is a function defined directly in a diamond\\n        require(_facetAddress != address(this), \\\"LibDiamondCut: Can't remove immutable function\\\");\\n        // replace selector with last selector, then delete last selector\\n        uint256 selectorPosition = ds.selectorToFacetAndPosition[_selector].functionSelectorPosition;\\n        uint256 lastSelectorPosition = ds.facetFunctionSelectors[_facetAddress].functionSelectors.length - 1;\\n        // if not the same then replace _selector with lastSelector\\n        if (selectorPosition != lastSelectorPosition) {\\n            bytes4 lastSelector = ds.facetFunctionSelectors[_facetAddress].functionSelectors[lastSelectorPosition];\\n            ds.facetFunctionSelectors[_facetAddress].functionSelectors[selectorPosition] = lastSelector;\\n            ds.selectorToFacetAndPosition[lastSelector].functionSelectorPosition = uint96(selectorPosition);\\n        }\\n        // delete the last selector\\n        ds.facetFunctionSelectors[_facetAddress].functionSelectors.pop();\\n        delete ds.selectorToFacetAndPosition[_selector];\\n\\n        // if no more selectors for facet address then delete the facet address\\n        if (lastSelectorPosition == 0) {\\n            // replace facet address with last facet address and delete last facet address\\n            uint256 lastFacetAddressPosition = ds.facetAddresses.length - 1;\\n            uint256 facetAddressPosition = ds.facetFunctionSelectors[_facetAddress].facetAddressPosition;\\n            if (facetAddressPosition != lastFacetAddressPosition) {\\n                address lastFacetAddress = ds.facetAddresses[lastFacetAddressPosition];\\n                ds.facetAddresses[facetAddressPosition] = lastFacetAddress;\\n                ds.facetFunctionSelectors[lastFacetAddress].facetAddressPosition = facetAddressPosition;\\n            }\\n            ds.facetAddresses.pop();\\n            delete ds.facetFunctionSelectors[_facetAddress].facetAddressPosition;\\n        }\\n    }\\n\\n    function initializeDiamondCut(address _init, bytes memory _calldata) internal {\\n        if (_init == address(0)) {\\n            return;\\n        }\\n        enforceHasContractCode(_init, \\\"LibDiamondCut: _init address has no code\\\");        \\n        (bool success, bytes memory error) = _init.delegatecall(_calldata);\\n        if (!success) {\\n            if (error.length > 0) {\\n                // bubble up error\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(error)\\n                    revert(add(32, error), returndata_size)\\n                }\\n            } else {\\n                revert InitializationFunctionReverted(_init, _calldata);\\n            }\\n        }\\n    }\\n\\n    function enforceHasContractCode(address _contract, string memory _errorMessage) internal view {\\n        uint256 contractSize;\\n        assembly {\\n            contractSize := extcodesize(_contract)\\n        }\\n        require(contractSize > 0, _errorMessage);\\n    }\\n}\\n\",\"keccak256\":\"0x32804b629ea56692e6458dcaf1a4998c62ef289b071fe2690be171b25926f495\",\"license\":\"MIT\"},\"contracts/shared/libraries/LibEnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position is the index of the value in the `values` array plus 1.\\n        // Position 0 is used to mean a value is not in the set.\\n        mapping(bytes32 value => uint256) _positions;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._positions[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We cache the value's position to prevent multiple reads from the same storage slot\\n        uint256 position = set._positions[value];\\n\\n        if (position != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 valueIndex = position - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (valueIndex != lastIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the lastValue to the index where the value to delete is\\n                set._values[valueIndex] = lastValue;\\n                // Update the tracked position of the lastValue (that was just moved)\\n                set._positions[lastValue] = position;\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the tracked position for the deleted slot\\n            delete set._positions[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._positions[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x86c1470cbfd878491e5de030072b647352d36bd27122cffb928970b1945282aa\",\"license\":\"MIT\"},\"contracts/shared/libraries/LibUintQueueLibrary.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nlibrary UintQueueLibrary {\\n    struct UintQueue {\\n        uint256[] data;\\n    }\\n\\n    // Add an element to the front of the queue\\n    function addFront(UintQueue storage queue, uint256 element) internal {\\n        queue.data.push(element); // Add element at the end\\n        uint256 len = queue.data.length;\\n        for (uint256 i = len - 1; i > 0; i--) {\\n            queue.data[i] = queue.data[i - 1];\\n        }\\n        queue.data[0] = element; // Move element to the front\\n    }\\n\\n    // Add an element to the back of the queue\\n    function addBack(UintQueue storage queue, uint256 element) internal {\\n        queue.data.push(element);\\n    }\\n\\n    // Add an element to the middle of the queue at the specified index\\n    function addMiddle(\\n        UintQueue storage queue,\\n        uint256 element,\\n        uint256 index\\n    ) internal {\\n        require(index <= queue.data.length, \\\"Index out of bounds\\\");\\n\\n        queue.data.push(element); // Add element at the end\\n        for (uint256 i = queue.data.length - 1; i > index; i--) {\\n            queue.data[i] = queue.data[i - 1];\\n        }\\n        queue.data[index] = element; // Move element to the middle\\n    }\\n\\n    // Remove an element from the front of the queue\\n    function removeFront(UintQueue storage queue) internal returns (uint256) {\\n        require(queue.data.length > 0, \\\"Queue is empty\\\");\\n\\n        uint256 element = queue.data[0];\\n        for (uint256 i = 0; i < queue.data.length - 1; i++) {\\n            queue.data[i] = queue.data[i + 1];\\n        }\\n        queue.data.pop();\\n        return element;\\n    }\\n\\n    // Remove an element from the back of the queue\\n    function removeBack(UintQueue storage queue) internal returns (uint256) {\\n        require(queue.data.length > 0, \\\"Queue is empty\\\");\\n\\n        uint256 element = queue.data[queue.data.length - 1];\\n        queue.data.pop();\\n        return element;\\n    }\\n\\n    // Remove an element from the middle of the queue at the specified index\\n    function removeMiddle(\\n        UintQueue storage queue,\\n        uint256 index\\n    ) internal returns (uint256) {\\n        require(index < queue.data.length, \\\"Index out of bounds\\\");\\n\\n        uint256 element = queue.data[index];\\n        for (uint256 i = index; i < queue.data.length - 1; i++) {\\n            queue.data[i] = queue.data[i + 1];\\n        }\\n        queue.data.pop();\\n        return element;\\n    }\\n\\n    // Get the element at the front of the queue\\n    function front(UintQueue storage queue) internal view returns (uint256) {\\n        require(queue.data.length > 0, \\\"Queue is empty\\\");\\n        return queue.data[0];\\n    }\\n\\n    // Get the element at the back of the queue\\n    function back(UintQueue storage queue) internal view returns (uint256) {\\n        require(queue.data.length > 0, \\\"Queue is empty\\\");\\n        return queue.data[queue.data.length - 1];\\n    }\\n\\n    // Check if the queue is empty\\n    function isEmpty(UintQueue storage queue) internal view returns (bool) {\\n        return queue.data.length == 0;\\n    }\\n\\n    // Get the number of elements in the queue\\n    function length(UintQueue storage queue) internal view returns (uint256) {\\n        return queue.data.length;\\n    }\\n\\n    // Get the element at a specific index in the queue\\n    function get(\\n        UintQueue storage queue,\\n        uint256 index\\n    ) internal view returns (uint256) {\\n        require(index < queue.data.length, \\\"Index out of bounds\\\");\\n        return queue.data[index];\\n    }\\n\\n    // Get the elements from the specified range of indices in the queue\\n    function getRange(\\n        UintQueue storage queue,\\n        uint256 fromIndex,\\n        uint256 toIndex\\n    ) internal view returns (uint256[] memory) {\\n        require(fromIndex <= toIndex, \\\"Invalid index range\\\");\\n        require(toIndex < queue.data.length, \\\"Index out of bounds\\\");\\n\\n        uint256 length = toIndex - fromIndex + 1;\\n        uint256[] memory range = new uint256[](length);\\n        for (uint256 i = fromIndex; i <= toIndex; i++) {\\n            range[i - fromIndex] = queue.data[i];\\n        }\\n        return range;\\n    }\\n\\n    // Get the elements from the specified range of indices in the queue in reverse order\\n    function getRangeReverse(\\n        UintQueue storage queue,\\n        uint256 fromIndex,\\n        uint256 toIndex\\n    ) internal view returns (uint256[] memory) {\\n        require(fromIndex <= toIndex, \\\"Invalid index range\\\");\\n        require(toIndex < queue.data.length, \\\"Index out of bounds\\\");\\n\\n        uint256 length = toIndex - fromIndex + 1;\\n        uint256[] memory range = new uint256[](length);\\n        for (uint256 i = 0; i < length; i++) {\\n            range[i] = queue.data[toIndex - i];\\n        }\\n        return range;\\n    }\\n\\n    function findIndex(\\n        UintQueue storage queue,\\n        uint256 element\\n    ) internal view returns (int256) {\\n        for (uint256 i = 0; i < queue.data.length; i++) {\\n            if (queue.data[i] == element) {\\n                return int256(i);\\n            }\\n        }\\n        return -1; // Return -1 if the element is not found\\n    }\\n\\n    function removeElement(\\n        UintQueue storage queue,\\n        uint256 element\\n    ) internal returns (bool) {\\n        int256 index = findIndex(queue, element);\\n        if (index == -1) {\\n            return false; // Element not found\\n        }\\n\\n        for (uint256 i = uint256(index); i < queue.data.length - 1; i++) {\\n            queue.data[i] = queue.data[i + 1];\\n        }\\n        queue.data.pop();\\n        return true;\\n    }\\n}\",\"keccak256\":\"0xfaf62c6946571c760902ae7ae76bf446b2ead79abe69b1e828063413e7459480\",\"license\":\"MIT\"},\"contracts/shared/storage/facets/AppStorageFacet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport { LibDiamond } from \\\"../../libraries/LibDiamond.sol\\\";\\nimport \\\"../structs/AppStorage.sol\\\";\\n\\ncontract AppStorageFacet {\\n    AppStorage internal s;\\n\\n    function appStorage() internal pure returns (AppStorage storage ds){\\n      assembly {\\n        ds.slot := 0\\n      }\\n    }\\n\\n}\\n\",\"keccak256\":\"0xd4fd84c269cb2298bb3ef82f3d19f9034989846f8426dd601a5d771ca76ae6bb\",\"license\":\"MIT\"},\"contracts/shared/storage/structs/AppStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {EnumerableSet} from \\\"../../libraries/LibEnumerableSet.sol\\\";\\nimport {UintQueueLibrary} from \\\"../../libraries/LibUintQueueLibrary.sol\\\";\\nimport {Nation} from \\\"./Nations.sol\\\";\\n\\nusing EnumerableSet for EnumerableSet.UintSet;\\nusing UintQueueLibrary for UintQueueLibrary.UintQueue;\\n\\n\\nstruct OFStatus{\\n    // max supply = 100,000,000\\n    // teamReserve = 10% = 10,000,000\\n    // communityReserve = 10% = 10,000,000\\n    // partnerReserve = 10% = 10,000,000\\n    // distributionReserve = 70% = 70,000,000\\n    uint256 teamReserve; // team reserve\\n    uint256 communityReserve; // community Event, marketing, etc\\n    uint256 partnerReserve; // partner reserve\\n    \\n    uint256 distributionReserve; // liquidity reserve, bonding curve minting\\n        \\n    uint256 totalBurned;\\n    uint256 totalMaxSupply;\\n    \\n    // ================\\n    uint256[10] _gap;\\n}\\n\\n\\n\\n// originForge Services for a OF Token State\\nstruct Service{\\n    string serviceName;\\n    uint256 mintAmount;\\n    uint256 burnAmount;\\n    \\n    // ================\\n    uint256[10] _gap;\\n}\\n\\nstruct User{\\n    string nickname;\\n    uint256 userIndex;\\n    address userAddress;\\n    Nation nation;\\n    uint256 originNumber;\\n    // ================\\n    uint256[9] _gap;\\n}\\n\\nstruct NationInfo {\\n    string nationName;\\n    string nationCode;\\n    string nationFlag;\\n    uint256 userCount;\\n\\n    // ================\\n    uint256[10] _gap;\\n}\\n\\n\\n\\nstruct AppStorage {\\n    OFStatus ofStatus;\\n    uint256 userCount;\\n    \\n\\n\\n    mapping(string => address) contractAddresses; // contract address for a service\\n    mapping(string => Service) services;\\n    \\n    // multi-index mapping\\n    mapping(address => User) usersByAddress;      // address\\n    mapping(uint256 => address) usersByIndex;     // index\\n    mapping(string => address) usersByNickname;   // nickname\\n    \\n    mapping(Nation => NationInfo) nations;\\n}\\n\\n\\n\\n\\n\",\"keccak256\":\"0x8dd3d58677fad78011f167e3caf28d44b7d36d897374a5c0dc7080d1b709d5d2\",\"license\":\"MIT\"},\"contracts/shared/storage/structs/Nations.sol\":{\"content\":\"// SPDX-License-Identifier: NONE\\n// https://en.wikipedia.org/wiki/ISO_3166-1_numeric\\n\\nenum Nation{\\nGH, //288, Ghana  GHA\\nGA, //266, Gabon GAB\\nGY, //328, Guyana GUY\\nGM, //270, Gambia GMB\\nGT, //320, Guatemala GTM\\nGD, //308, Grenada GRD\\nGR, //300, Greece GRC\\nGN, //324, Guinea GIN\\nGW, //624, Guinea-Bissau GNB\\nNA, //516, Namibia NAM\\nNR, //520, Nauru NRU\\nNG, //566, Nigeria NGA\\nSS, //728, South Sudan SSD\\nZA, //710, South Africa ZAF\\nNL, //528, Netherlands NLD\\nNP, //524, Nepal NPL\\nNO, //578, Norway NOR\\nNZ, //554, New Zealand NZL\\nNU, //570, Niue NIU\\nNE, //562, Niger NER\\nNI, //558, Nicaragua NIC\\nDK, //208, Denmark DNK\\nDO, //214, Dominican Republic DOM\\nDM, //212, Dominica DMA\\nDE, //276, Germany DEU\\nTL, //626, Timor-Leste TLS\\nLA, //418, Laos LAO\\nLR, //430, Liberia LBR\\nLV, //428, Latvia LVA\\nRU, //643, Russia RUS\\nLB, //422, Lebanon LBN\\nLS, //426, Lesotho LSO\\nRO, //642, Romania ROU\\nLU, //442, Luxembourg LUX\\nRW, //646, Rwanda RWA\\nLY, //434, Libya LBY\\nLT, //440, Lithuania LTU\\nLI, //438, Liechtenstein LIE\\nMG, //450, Madagascar MDG\\nMH, //584, Marshall Islands MHL\\nFM, //583, Federated States of Micronesia FSM\\nMW, //454, Malawi MWI\\nMY, //458, Malaysia MYS\\nML, //466, Mali MLI\\nMX, //484, Mexico MEX\\nMC, //492, Monaco MCO\\nMA, //504, Morocco MAR\\nMU, //480, Mauritius MUS\\nMR, //478, Mauritania MRT\\nMZ, //508, Mazambique MOZ\\nME, //499, Montenegro MNE\\nMD, //498, Moldova MDA\\nMV, //462, Maldives MDV\\nMT, //470, Malta MLT\\nMN, //496, Mongolia MNG\\nUS, //840, United States of America USA\\nMM, //104, Myanmar MMR\\nVU, //548, Vanuatu VUT\\nBH, //48, Bahrain BHR\\nBB, //52, Barbados BRB\\nVA, //336, Vatican VAT\\nBS, //44, Bahamas BHS\\nBD, //50, Bangladesh BGD\\nBJ, //204, Benin BEN\\nVE, //862, Venezuela VEN\\nVN, //704, Vietnam VNM\\nBE, //56, Belgium BEL\\nBY, //112, Belarus BLR\\nBZ, //84, Belize BLZ\\nBA, //70, Bosnia-Herzegovina BIH\\nBW, //72, Botswana BWA\\nBO, //68, Bolivia BOL\\nBI, //108, Burundi BDI\\nBF, //854, Burkina Faso BFA\\nBT, //64, Bhutan BTN\\nMK, //807, North Macedonia MKD\\nBG, //100, Bulgaria BGR\\nBR, //76, Brazil BRA\\nBN, //96, Brunei BRN\\nWS, //882, Samoa WSM\\nSA, //682, Saudi Arabia SAU\\nCY, //196, Cyprus CYP\\nSM, //674, San Marino SMR\\nST, //678, S?o Tom? & Principe STP\\nSN, //686, Senegal SEN\\nRS, //688, Serbia SRB\\nSC, //690, Seychelles SYC\\nLC, //662, St. Lucia LCA\\nVC, //670, St. Vincent & the Grenadines VCT\\nKN, //659, St. Kitts-Nevis KNA\\nSO, //706, Somalia SOM\\nSB, //90, Solomon Islands SLB\\nSD, //736, Sudan SDN\\nSR, //740, Suriname SUR\\nLK, //144, Sri Lanka LKA\\nSE, //752, Sweden SWE\\nCH, //756, Swiss CHE\\nES, //724, Spain ESP\\nSK, //703, Slovakia SVK\\nSI, //705, Slovenia SVN\\nSY, //760, Syria SYR\\nSL, //694, Sierra Leone SLE\\nSG, //702, Singapore SGP\\nAE, //784, United Arab Emirates : UAE ARE\\nAM, //51, Armenia ARM\\nAR, //32, Argentina ARG\\nIS, //352, Iceland ISL\\nHT, //332, Haiti HTI\\nIE, //372, Ireland IRL\\nAZ, //31, Azerbaijan AZE\\nAF, //4, Afghanistan AFG\\nAD, //20, Andorra AND\\nAL, //8, Albania ALB\\nDZ, //12, Algeria DZA\\nAO, //24, Angola AGO\\nAG, //28, Antigua and Barbuda ATG\\nER, //232, Eritrea ERI\\nSZ, //748, Eswatini SWZ\\nEE, //233, Estonia EST\\nEC, //218, Ecuador ECU\\nET, //231, Ethiopia ETH\\nSV, //222, El Salvador SLV\\nGB, //826, United Kingdom GBR\\nYE, //887, Yemen YEM\\nOM, //512, Oman OMN\\nAT, //40, Austria AUT\\nHN, //340, Honduras HND\\nJO, //400, Jordan JOR\\nUG, //800, Uganda UGA\\nUY, //858, Uruguay URY\\nUZ, //860, Uzbekistan UZB\\nUA, //804, Ukraine UKR\\nIQ, //368, Iraq IRQ\\nIR, //364, Iran IRN\\nIL, //376, Israel ISR\\nEG, //818, Egypt EGY\\nIT, //380, Italia ITA\\nIN, //356, India IND\\nID, //360, Indonesia IDN\\nJP, //392, Japan JPN\\nJM, //388, Jamaica JAM\\nZM, //894, Zambia ZMB\\nGQ, //226, Equatorial Guinea GNQ\\nGE, //268, Georgia GEO\\nCN, //156, China CHN\\nCF, //140, Central African Republic CAF\\nDJ, //262, Djibouti DJI\\nZW, //716, Zimbabwe ZWE\\nTD, //148, Chad TCD\\nCZ, //203, Czech CZE\\nCL, //152, Chile CHL\\nCM, //120, Cameroon CMR\\nCV, //132, Cape Verde CPV\\nKZ, //398, Kazakhstan KAZ\\nQA, //634, Qatar QAT\\nKH, //116, Cambodia KHM\\nCA, //124, Canada CAN\\nKE, //404, Kenya KEN\\nKM, //174, Comoros COM\\nXK, //383, Kosovo XKX\\nCR, //188, Costa Rica CRI\\nCI, //384, C?te D'Ivoire CIV\\nCO, //170, Colombia COL\\nCG, //178, Congo COG\\nCD, //180, Democratic Republic of Congo COD\\nCU, //192, Cuba CUB\\nKW, //414, Kuwait KWT\\nCK, //184, Cook Islands COK\\nHR, //191, Croatia HRV\\nKG, //417, Kyrgyz KGZ\\nKI, //296, Kiribati KIR\\nTJ, //762, Tajikistan TJK\\nTZ, //834, Tanzania TZA\\nTH, //764, Thailand THA\\nTR, //792, Turkey TUR\\nTG, //768, Togo TGO\\nTO, //776, Tonga TON\\nTM, //795, Turkmenistan TKM\\nTV, //798, Tuvalu TUV\\nTN, //788, Tunisia TUN\\nTT, //780, Trinidad & Tobago TTO\\nPA, //591, Panama PAN\\nPY, //600, Paraguay PRY\\nPK, //586, Pakistan PAK\\nPG, //598, Papua New Guinea :PNG PNG\\nPW, //585, Palau PLW\\nPS, //275, Palestine PSE\\nPE, //604, Peru PER\\nPT, //620, Portugal PRT\\nPL, //616, Poland POL\\nFR, //250, France FRA\\nFJ, //242, Fiji FJI\\nFI, //246, Finland FIN\\nPH, //608, Philippines PHL\\nHU, //348, Hungary HUN\\nAU //36, Australia AUS\\n}\",\"keccak256\":\"0x91cc4982106505e6eccd188426147580a52f3b9e2c8cc9b5f57b74488d54375f\",\"license\":\"NONE\"},\"contracts/shared/utils/modifiersFacet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {LibDiamond} from \\\"../libraries/LibDiamond.sol\\\";\\nimport {AppStorage} from \\\"../storage/facets/AppStorageFacet.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\ncontract modifiersFacet {\\n    AppStorage internal s;\\n\\n    modifier onlyAdmin() {\\n        LibDiamond.enforceIsContractOwner();\\n        _;\\n    }\\n\\n    modifier onlyEOA(address _address) {\\n        uint32 size;\\n        assembly {\\n            size := extcodesize(_address)\\n        }\\n        \\n        require(size == 0, \\\"ModifiersFacet: not EOA\\\");\\n        _;\\n    }\\n\\n\\n    \\n}\\n\",\"keccak256\":\"0x1c50277aeefccec07b2a2e9198679b391dbeaf6e59a6ae3981b974652c208ef6\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60808060405234601f5760016017556064601d55611c0990816100258239f35b600080fdfe6080604052600436101561001257600080fd5b6000803560e01c806310603023146113475780631d3824ea1461132c57806324bcdfbd1461130e57806340f4657114610fd057806349ad6e1b14610f815780634e63413514610f635780635068bdfd14610f455780635b0c5dbd14610eb45780636affea7d146107f95780638a497c4c146107ba578063aae6e68a146105ae578063b52d6ce414610587578063bd55022a14610569578063cabf4e14146105375763dcdb3eb8146100c257600080fd5b80600319360112610534576100d5611ae9565b6100de346117ca565b9134106104f05780156104ac576001600160a01b0360246040516362616e6b60e01b8152601160048201522054168015610468578380808581945af161012261166f565b501561042457610134816018546115e9565b601855826001600160a01b0360276040516637b32a37b5b2b760c91b815260116007820152205416803b15610420576040517fcce7ec13000000000000000000000000000000000000000000000000000000008152336004820152602481018490529082908290604490829084905af18015610415576103fc575b50506101bc601a54611660565b9182601a5533845260136020526040842092604051906101db8261144e565b8082526020820194600186526101f760408401913383526114be565b9560608401968752608084019034825260a085019287845260c08601944286528a52601c60205260408a209551865560018601915115159074ffffffffffffffffffffffffffffffffffffffffff1960ff74ffffffffffffffffffffffffffffffffffffffff008554935160081b16931691161717905560028401965196875167ffffffffffffffff81116103e8576102908254611414565b601f81116103a3575b506020998a906001601f84111461033c579060059798999a83610331575b50508160011b916000199060031b1c19161790555b5160038501555160048401555191015560408051348152602081018490529081019190915242606082015233907faea3bb9633d70615c4a6a3a8422089870b4add2b56e87196cebc9cccea96ee1b9080608081015b0390a26001601755604051908152f35b0151905038806102b7565b9199601f198b16848452828420935b81811061038c575091600193918c60059a9b9c9d9410610373575b505050811b0190556102cc565b015160001960f88460031b161c19169055388080610366565b92938d60018192878601518155019501930161034b565b828b5260208b20601f830160051c810191602084106103de575b601f0160051c01905b8181106103d35750610299565b8b81556001016103c6565b90915081906103bd565b60248a634e487b7160e01b81526041600452fd5b816104069161149c565b6104115782386101af565b8280fd5b6040513d84823e3d90fd5b5080fd5b606460405162461bcd60e51b815260206004820152601a60248201527f4661696c656420746f2073656e642066656520746f2062616e6b0000000000006044820152fd5b606460405162461bcd60e51b815260206004820152601460248201527f496e76616c69642062616e6b20616464726573730000000000000000000000006044820152fd5b606460405162461bcd60e51b815260206004820152601560248201527f4e6f20626f6e6420746f6b656e73206d696e74656400000000000000000000006044820152fd5b606460405162461bcd60e51b815260206004820152601460248201527f496e73756666696369656e74207061796d656e740000000000000000000000006044820152fd5b80fd5b50346105345760203660031901126105345760606105566004356117ca565b9060405192835260208301526040820152f35b50346105345780600319360112610534576020601a54604051908152f35b50346105345760203660031901126105345760206105a66004356116af565b604051908152f35b50346105345760203660031901126105345760043567ffffffffffffffff81116104205736602382011215610420578060040135906105ec82611597565b906105fa604051928361149c565b82825260208201906024829460061b820101903682116107b657602401915b8183106107855750505061062b611a4c565b519068010000000000000000821161077157601b5482601b558083106106a0575b50601b83527f3ad8aa4f87544323a9d1e5dd902f40c356527a7955687113db5f9a85ad579dc183915b838310610680578480f35b600260208281600194518051875501518486015501920192019190610675565b7f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8116810361075d577f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8316830361075d5760011b7f3ad8aa4f87544323a9d1e5dd902f40c356527a7955687113db5f9a85ad579dc1018260011b7f3ad8aa4f87544323a9d1e5dd902f40c356527a7955687113db5f9a85ad579dc1015b81811061074b575061064c565b8085600292558560018201550161073e565b602484634e487b7160e01b81526011600452fd5b602483634e487b7160e01b81526041600452fd5b6040833603126107b6576020604091825161079f81611480565b853581528286013583820152815201920191610619565b8580fd5b50346105345760203660031901126105345760043590601b548210156105345760406107e583611562565b506001815491015482519182526020820152f35b503461053457610808366113b8565b9091610812611ae9565b8215610e70578260185410610e2c576001600160a01b0360276040516637b32a37b5b2b760c91b815260116007820152205416906001600160a01b0360246040516362616e6b60e01b81526011600482015220541682151580610e23575b15610ddf57612710610884601d5487611639565b0492610890848761160c565b9161089a836116af565b958615610d9b578610610d5757854710610d13576001600160a01b0360276040516637b32a37b5b2b760c91b815260116007820152205416803b15610d0f576040517f6c197ff5000000000000000000000000000000000000000000000000000000008152336004820152602481018990529085908290604490829084905af18015610d0457610cf0575b506109328760185461160c565b601855610940601a54611660565b80601a55338552601360205260408520906040519161095e8361144e565b8183526020830187815261097860408501923384526114be565b6060850190815260808501918c835260a08601938c855260c08701954287528b52601c60205260408b209651875560018701915115159074ffffffffffffffffffffffffffffffffffffffffff1960ff74ffffffffffffffffffffffffffffffffffffffff008554935160081b16931691161717905560028501905180519067ffffffffffffffff8211610cdc57908291610a198d99989796959454611414565b601f8111610c7e575b506020908c601f8411600114610be2579383610afe9894610b049b9894610b349f9e9d9b989460059892610bd7575b50508160011b916000199060031b1c19161790555b51600385015551600484015551910155610ac96040517f23b872dd0000000000000000000000000000000000000000000000000000000060208201523360248201523060448201528c606482015260648152610ac360848261149c565b86611b56565b60405163a9059cbb60e01b60208201526001600160a01b0391909116602482015260448082019390935291825260648261149c565b82611b56565b6040519163a9059cbb60e01b6020840152846024840152604483015260448252610b2f60648361149c565b611b56565b80808085335af1610b4361166f565b5015610b93576040805193845260208481019290925283018290524260608401529133907ffc316bb28fb4c19ce6efeb13ccffe4f9b738bc57296afa5976dc7895c3253f92908060808101610321565b606460405162461bcd60e51b815260206004820152601560248201527f4661696c656420746f2073656e6420726566756e6400000000000000000000006044820152fd5b015190503880610a51565b90601f9c9b9a99989796959493929c1983168483528d8320925b818110610c4a57508360059693610b349f610b049d9c9a9794610afe9c9a9760019510610c31575b505050811b019055610a66565b015160001960f88460031b161c19169055388080610c24565b939597999b9c9d9496989a5090916020600181928786015181550195019301908f9a98969492919d9c9b999795939d610bfc565b90919280949596979899508c5260208c20601f840160051c81019160208510610cd2575b90601f8f9b9a99989796959493920160051c01905b818110610cc45750610a22565b8d81558e9a50600101610cb7565b9091508190610ca2565b60248b634e487b7160e01b81526041600452fd5b84610cfd9195929561149c565b9238610925565b6040513d87823e3d90fd5b8480fd5b606460405162461bcd60e51b815260206004820152601d60248201527f496e73756666696369656e7420636f6e74726163742062616c616e63650000006044820152fd5b606460405162461bcd60e51b815260206004820152601560248201527f526566756e6420616d6f756e7420746f6f206c6f7700000000000000000000006044820152fd5b606460405162461bcd60e51b815260206004820152601060248201527f4e6f20726566756e6420616d6f756e74000000000000000000000000000000006044820152fd5b606460405162461bcd60e51b815260206004820152601160248201527f496e76616c6964206164647265737365730000000000000000000000000000006044820152fd5b50801515610870565b606460405162461bcd60e51b815260206004820152601360248201527f496e73756666696369656e7420737570706c79000000000000000000000000006044820152fd5b606460405162461bcd60e51b815260206004820152601d60248201527f416d6f756e74206d7573742062652067726561746572207468616e20300000006044820152fd5b5034610534576020366003190112610534576040906004358152601c602052208054600182015491610ee8600282016114be565b600382015491610f3160056004830154920154926001600160a01b03604051978897885260ff81161515602089015260081c16604087015260e0606087015260e08601906113d3565b92608085015260a084015260c08301520390f35b50346105345780600319360112610534576020601854604051908152f35b50346105345780600319360112610534576020601954604051908152f35b50346105345760203660031901126105345760043590610fa382601a546115e9565b600019810191908211610fbc5760206105a68484611619565b80634e487b7160e01b602492526011600452fd5b503461053457610fdf366113b8565b819291156112ca57601a5490610ff581836115e9565b600019810190811161075d578161100b91611619565b908185116112865760001985018581116112725761102c8261103392611639565b91826115e9565b600019810193908411611272576000198101908111938461125e57828183806110619410911802831861160c565b916001830180931161125e5761107683611597565b94611084604051968761149c565b838652601f1961109385611597565b01875b81811061121d575050865b848110611168575050505050604051926060840160608552835180915260808501602060808360051b880101950192905b8282106110ed57505050508293602084015260408301520390f35b90919294602080600192607f198a820301855288519081518152828201511515838201526001600160a01b03604083015116604082015260c080611140606085015160e0606086015260e08501906113d3565b936080810151608085015260a081015160a085015201519101529701920192019092916110d2565b81611209578061118361117d600193866115e9565b8661160c565b8952601c6020526040892060056040519161119d8361144e565b805483526001600160a01b038582015460ff81161515602086015260081c1660408401526111cd600282016114be565b606084015260038101546080840152600481015460a0840152015460c08201526111f7828a61164c565b52611202818961164c565b50016110a1565b602488634e487b7160e01b81526011600452fd5b60209060405161122c8161144e565b8a81528a838201528a60408201526060808201528a60808201528a60a08201528a60c082015282828b01015201611096565b602486634e487b7160e01b81526011600452fd5b602485634e487b7160e01b81526011600452fd5b606460405162461bcd60e51b815260206004820152601860248201527f50616765206578636565647320746f74616c20706167657300000000000000006044820152fd5b606460405162461bcd60e51b815260206004820152601b60248201527f50616765206d7573742062652067726561746572207468616e203000000000006044820152fd5b50346105345780600319360112610534576020601d54604051908152f35b503461053457806003193601126105345760206105a66115af565b503461053457602036600319011261053457600435611364611a4c565b61271081101561137457601d5580f35b606460405162461bcd60e51b815260206004820152600c60248201527f46656520746f6f206869676800000000000000000000000000000000000000006044820152fd5b60409060031901126113ce576004359060243590565b600080fd5b919082519283825260005b8481106113ff575050826000602080949584010152601f8019910116010190565b806020809284010151828286010152016113de565b90600182811c92168015611444575b602083101461142e57565b634e487b7160e01b600052602260045260246000fd5b91607f1691611423565b60e0810190811067ffffffffffffffff82111761146a57604052565b634e487b7160e01b600052604160045260246000fd5b6040810190811067ffffffffffffffff82111761146a57604052565b90601f8019910116810190811067ffffffffffffffff82111761146a57604052565b90604051918260008254926114d284611414565b808452936001811690811561154057506001146114f9575b506114f79250038361149c565b565b90506000929192526020600020906000915b8183106115245750509060206114f792820101386114ea565b602091935080600191548385890101520191019091849261150b565b9050602092506114f794915060ff191682840152151560051b820101386114ea565b601b5481101561158157601b60005260206000209060011b0190600090565b634e487b7160e01b600052603260045260246000fd5b67ffffffffffffffff811161146a5760051b60200190565b6000906000601b5490601854905b8281106115c957505050565b6115d281611562565b50548211156115e3576001016115bd565b93505050565b919082018092116115f657565b634e487b7160e01b600052601160045260246000fd5b919082039182116115f657565b8115611623570490565b634e487b7160e01b600052601260045260246000fd5b818102929181159184041417156115f657565b80518210156115815760209160051b010190565b60001981146115f65760010190565b3d156116aa573d9067ffffffffffffffff821161146a576040519161169e601f8201601f19166020018461149c565b82523d6000602084013e565b606090565b6018548082116117865760009190816116c66115af565b905b6116d3575b50505090565b90919260009082159182600014611755575061172661172c61173292865b8089101561174d5750879283915b670de0b6b3a764000061171f60016117168b611562565b50015485611639565b04906115e9565b9761160c565b9461160c565b906117485781156115f6579060001901826116c8565b6116cd565b9283916116ff565b600019840190848211610fbc575061172c6117329261178161177961172694611562565b50548861160c565b6116f1565b606460405162461bcd60e51b815260206004820152601560248201527f416d6f756e74206578636565647320737570706c7900000000000000000000006044820152fd5b600091601b54916117da83611597565b926117e8604051948561149c565b808452601b8552847f3ad8aa4f87544323a9d1e5dd902f40c356527a7955687113db5f9a85ad579dc1602086015b838310611a1f575050505060185493606482029082820460641483151715610fbc57908161185a93929695965050600161271060001983010401901515029061160c565b9283906000936118686115af565b95601954965b8351811015611a0e576020611883828661164c565b5101519661189c84611895848861164c565b515161160c565b9088156119e4576000670de0b6b3a7640000850290858204670de0b6b3a76400001486151715610fbc5750896118d191611b24565b828111156119f1575081156119e457816118ea916115e9565b926119116118f88a84611639565b6001670de0b6b3a7640000600019830104019015150290565b9080821161198f5761192d92916119279161160c565b946115e9565b96888089116119465750506001905b019591909561186e565b6119689550611976945061196e919250926119686118f89461197c999a61160c565b9061160c565b975087611639565b8261160c565b9061198a601d5480936115e9565b929190565b9550505050909550670de0b6b3a7640000829594950291808304670de0b6b3a764000014901517156115f6576119d56119ce61197c956119db94611b24565b80926115e9565b956115e9565b5060009061160c565b929397505060019061193c565b949950905061197c9697506119db94506119d592508391506115e9565b509291505061197c9293945061160c565b60026020600192604051611a3281611480565b855481528486015483820152815201920192019190611816565b6001600160a01b037fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c132054163303611a7f57565b608460405162461bcd60e51b815260206004820152602260248201527f4c69624469616d6f6e643a204d75737420626520636f6e7472616374206f776e60448201527f65720000000000000000000000000000000000000000000000000000000000006064820152fd5b600260175414611afa576002601755565b7f3ee5aeb50000000000000000000000000000000000000000000000000000000060005260046000fd5b908015611b4357611b3b6001916000198401611619565b019015150290565b634e487b7160005260126020526024601cfd5b906000602091828151910182855af115611bc7576000513d611bbe57506001600160a01b0381163b155b611b875750565b6001600160a01b03907f5274afe7000000000000000000000000000000000000000000000000000000006000521660045260246000fd5b60011415611b80565b6040513d6000823e3d90fdfea26469706673582212209c8fea3d5f0a073ad562eee24232e73b32f27f29fc222604bf76745bcae0463d64736f6c634300081b0033",
  "deployedBytecode": "0x6080604052600436101561001257600080fd5b6000803560e01c806310603023146113475780631d3824ea1461132c57806324bcdfbd1461130e57806340f4657114610fd057806349ad6e1b14610f815780634e63413514610f635780635068bdfd14610f455780635b0c5dbd14610eb45780636affea7d146107f95780638a497c4c146107ba578063aae6e68a146105ae578063b52d6ce414610587578063bd55022a14610569578063cabf4e14146105375763dcdb3eb8146100c257600080fd5b80600319360112610534576100d5611ae9565b6100de346117ca565b9134106104f05780156104ac576001600160a01b0360246040516362616e6b60e01b8152601160048201522054168015610468578380808581945af161012261166f565b501561042457610134816018546115e9565b601855826001600160a01b0360276040516637b32a37b5b2b760c91b815260116007820152205416803b15610420576040517fcce7ec13000000000000000000000000000000000000000000000000000000008152336004820152602481018490529082908290604490829084905af18015610415576103fc575b50506101bc601a54611660565b9182601a5533845260136020526040842092604051906101db8261144e565b8082526020820194600186526101f760408401913383526114be565b9560608401968752608084019034825260a085019287845260c08601944286528a52601c60205260408a209551865560018601915115159074ffffffffffffffffffffffffffffffffffffffffff1960ff74ffffffffffffffffffffffffffffffffffffffff008554935160081b16931691161717905560028401965196875167ffffffffffffffff81116103e8576102908254611414565b601f81116103a3575b506020998a906001601f84111461033c579060059798999a83610331575b50508160011b916000199060031b1c19161790555b5160038501555160048401555191015560408051348152602081018490529081019190915242606082015233907faea3bb9633d70615c4a6a3a8422089870b4add2b56e87196cebc9cccea96ee1b9080608081015b0390a26001601755604051908152f35b0151905038806102b7565b9199601f198b16848452828420935b81811061038c575091600193918c60059a9b9c9d9410610373575b505050811b0190556102cc565b015160001960f88460031b161c19169055388080610366565b92938d60018192878601518155019501930161034b565b828b5260208b20601f830160051c810191602084106103de575b601f0160051c01905b8181106103d35750610299565b8b81556001016103c6565b90915081906103bd565b60248a634e487b7160e01b81526041600452fd5b816104069161149c565b6104115782386101af565b8280fd5b6040513d84823e3d90fd5b5080fd5b606460405162461bcd60e51b815260206004820152601a60248201527f4661696c656420746f2073656e642066656520746f2062616e6b0000000000006044820152fd5b606460405162461bcd60e51b815260206004820152601460248201527f496e76616c69642062616e6b20616464726573730000000000000000000000006044820152fd5b606460405162461bcd60e51b815260206004820152601560248201527f4e6f20626f6e6420746f6b656e73206d696e74656400000000000000000000006044820152fd5b606460405162461bcd60e51b815260206004820152601460248201527f496e73756666696369656e74207061796d656e740000000000000000000000006044820152fd5b80fd5b50346105345760203660031901126105345760606105566004356117ca565b9060405192835260208301526040820152f35b50346105345780600319360112610534576020601a54604051908152f35b50346105345760203660031901126105345760206105a66004356116af565b604051908152f35b50346105345760203660031901126105345760043567ffffffffffffffff81116104205736602382011215610420578060040135906105ec82611597565b906105fa604051928361149c565b82825260208201906024829460061b820101903682116107b657602401915b8183106107855750505061062b611a4c565b519068010000000000000000821161077157601b5482601b558083106106a0575b50601b83527f3ad8aa4f87544323a9d1e5dd902f40c356527a7955687113db5f9a85ad579dc183915b838310610680578480f35b600260208281600194518051875501518486015501920192019190610675565b7f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8116810361075d577f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8316830361075d5760011b7f3ad8aa4f87544323a9d1e5dd902f40c356527a7955687113db5f9a85ad579dc1018260011b7f3ad8aa4f87544323a9d1e5dd902f40c356527a7955687113db5f9a85ad579dc1015b81811061074b575061064c565b8085600292558560018201550161073e565b602484634e487b7160e01b81526011600452fd5b602483634e487b7160e01b81526041600452fd5b6040833603126107b6576020604091825161079f81611480565b853581528286013583820152815201920191610619565b8580fd5b50346105345760203660031901126105345760043590601b548210156105345760406107e583611562565b506001815491015482519182526020820152f35b503461053457610808366113b8565b9091610812611ae9565b8215610e70578260185410610e2c576001600160a01b0360276040516637b32a37b5b2b760c91b815260116007820152205416906001600160a01b0360246040516362616e6b60e01b81526011600482015220541682151580610e23575b15610ddf57612710610884601d5487611639565b0492610890848761160c565b9161089a836116af565b958615610d9b578610610d5757854710610d13576001600160a01b0360276040516637b32a37b5b2b760c91b815260116007820152205416803b15610d0f576040517f6c197ff5000000000000000000000000000000000000000000000000000000008152336004820152602481018990529085908290604490829084905af18015610d0457610cf0575b506109328760185461160c565b601855610940601a54611660565b80601a55338552601360205260408520906040519161095e8361144e565b8183526020830187815261097860408501923384526114be565b6060850190815260808501918c835260a08601938c855260c08701954287528b52601c60205260408b209651875560018701915115159074ffffffffffffffffffffffffffffffffffffffffff1960ff74ffffffffffffffffffffffffffffffffffffffff008554935160081b16931691161717905560028501905180519067ffffffffffffffff8211610cdc57908291610a198d99989796959454611414565b601f8111610c7e575b506020908c601f8411600114610be2579383610afe9894610b049b9894610b349f9e9d9b989460059892610bd7575b50508160011b916000199060031b1c19161790555b51600385015551600484015551910155610ac96040517f23b872dd0000000000000000000000000000000000000000000000000000000060208201523360248201523060448201528c606482015260648152610ac360848261149c565b86611b56565b60405163a9059cbb60e01b60208201526001600160a01b0391909116602482015260448082019390935291825260648261149c565b82611b56565b6040519163a9059cbb60e01b6020840152846024840152604483015260448252610b2f60648361149c565b611b56565b80808085335af1610b4361166f565b5015610b93576040805193845260208481019290925283018290524260608401529133907ffc316bb28fb4c19ce6efeb13ccffe4f9b738bc57296afa5976dc7895c3253f92908060808101610321565b606460405162461bcd60e51b815260206004820152601560248201527f4661696c656420746f2073656e6420726566756e6400000000000000000000006044820152fd5b015190503880610a51565b90601f9c9b9a99989796959493929c1983168483528d8320925b818110610c4a57508360059693610b349f610b049d9c9a9794610afe9c9a9760019510610c31575b505050811b019055610a66565b015160001960f88460031b161c19169055388080610c24565b939597999b9c9d9496989a5090916020600181928786015181550195019301908f9a98969492919d9c9b999795939d610bfc565b90919280949596979899508c5260208c20601f840160051c81019160208510610cd2575b90601f8f9b9a99989796959493920160051c01905b818110610cc45750610a22565b8d81558e9a50600101610cb7565b9091508190610ca2565b60248b634e487b7160e01b81526041600452fd5b84610cfd9195929561149c565b9238610925565b6040513d87823e3d90fd5b8480fd5b606460405162461bcd60e51b815260206004820152601d60248201527f496e73756666696369656e7420636f6e74726163742062616c616e63650000006044820152fd5b606460405162461bcd60e51b815260206004820152601560248201527f526566756e6420616d6f756e7420746f6f206c6f7700000000000000000000006044820152fd5b606460405162461bcd60e51b815260206004820152601060248201527f4e6f20726566756e6420616d6f756e74000000000000000000000000000000006044820152fd5b606460405162461bcd60e51b815260206004820152601160248201527f496e76616c6964206164647265737365730000000000000000000000000000006044820152fd5b50801515610870565b606460405162461bcd60e51b815260206004820152601360248201527f496e73756666696369656e7420737570706c79000000000000000000000000006044820152fd5b606460405162461bcd60e51b815260206004820152601d60248201527f416d6f756e74206d7573742062652067726561746572207468616e20300000006044820152fd5b5034610534576020366003190112610534576040906004358152601c602052208054600182015491610ee8600282016114be565b600382015491610f3160056004830154920154926001600160a01b03604051978897885260ff81161515602089015260081c16604087015260e0606087015260e08601906113d3565b92608085015260a084015260c08301520390f35b50346105345780600319360112610534576020601854604051908152f35b50346105345780600319360112610534576020601954604051908152f35b50346105345760203660031901126105345760043590610fa382601a546115e9565b600019810191908211610fbc5760206105a68484611619565b80634e487b7160e01b602492526011600452fd5b503461053457610fdf366113b8565b819291156112ca57601a5490610ff581836115e9565b600019810190811161075d578161100b91611619565b908185116112865760001985018581116112725761102c8261103392611639565b91826115e9565b600019810193908411611272576000198101908111938461125e57828183806110619410911802831861160c565b916001830180931161125e5761107683611597565b94611084604051968761149c565b838652601f1961109385611597565b01875b81811061121d575050865b848110611168575050505050604051926060840160608552835180915260808501602060808360051b880101950192905b8282106110ed57505050508293602084015260408301520390f35b90919294602080600192607f198a820301855288519081518152828201511515838201526001600160a01b03604083015116604082015260c080611140606085015160e0606086015260e08501906113d3565b936080810151608085015260a081015160a085015201519101529701920192019092916110d2565b81611209578061118361117d600193866115e9565b8661160c565b8952601c6020526040892060056040519161119d8361144e565b805483526001600160a01b038582015460ff81161515602086015260081c1660408401526111cd600282016114be565b606084015260038101546080840152600481015460a0840152015460c08201526111f7828a61164c565b52611202818961164c565b50016110a1565b602488634e487b7160e01b81526011600452fd5b60209060405161122c8161144e565b8a81528a838201528a60408201526060808201528a60808201528a60a08201528a60c082015282828b01015201611096565b602486634e487b7160e01b81526011600452fd5b602485634e487b7160e01b81526011600452fd5b606460405162461bcd60e51b815260206004820152601860248201527f50616765206578636565647320746f74616c20706167657300000000000000006044820152fd5b606460405162461bcd60e51b815260206004820152601b60248201527f50616765206d7573742062652067726561746572207468616e203000000000006044820152fd5b50346105345780600319360112610534576020601d54604051908152f35b503461053457806003193601126105345760206105a66115af565b503461053457602036600319011261053457600435611364611a4c565b61271081101561137457601d5580f35b606460405162461bcd60e51b815260206004820152600c60248201527f46656520746f6f206869676800000000000000000000000000000000000000006044820152fd5b60409060031901126113ce576004359060243590565b600080fd5b919082519283825260005b8481106113ff575050826000602080949584010152601f8019910116010190565b806020809284010151828286010152016113de565b90600182811c92168015611444575b602083101461142e57565b634e487b7160e01b600052602260045260246000fd5b91607f1691611423565b60e0810190811067ffffffffffffffff82111761146a57604052565b634e487b7160e01b600052604160045260246000fd5b6040810190811067ffffffffffffffff82111761146a57604052565b90601f8019910116810190811067ffffffffffffffff82111761146a57604052565b90604051918260008254926114d284611414565b808452936001811690811561154057506001146114f9575b506114f79250038361149c565b565b90506000929192526020600020906000915b8183106115245750509060206114f792820101386114ea565b602091935080600191548385890101520191019091849261150b565b9050602092506114f794915060ff191682840152151560051b820101386114ea565b601b5481101561158157601b60005260206000209060011b0190600090565b634e487b7160e01b600052603260045260246000fd5b67ffffffffffffffff811161146a5760051b60200190565b6000906000601b5490601854905b8281106115c957505050565b6115d281611562565b50548211156115e3576001016115bd565b93505050565b919082018092116115f657565b634e487b7160e01b600052601160045260246000fd5b919082039182116115f657565b8115611623570490565b634e487b7160e01b600052601260045260246000fd5b818102929181159184041417156115f657565b80518210156115815760209160051b010190565b60001981146115f65760010190565b3d156116aa573d9067ffffffffffffffff821161146a576040519161169e601f8201601f19166020018461149c565b82523d6000602084013e565b606090565b6018548082116117865760009190816116c66115af565b905b6116d3575b50505090565b90919260009082159182600014611755575061172661172c61173292865b8089101561174d5750879283915b670de0b6b3a764000061171f60016117168b611562565b50015485611639565b04906115e9565b9761160c565b9461160c565b906117485781156115f6579060001901826116c8565b6116cd565b9283916116ff565b600019840190848211610fbc575061172c6117329261178161177961172694611562565b50548861160c565b6116f1565b606460405162461bcd60e51b815260206004820152601560248201527f416d6f756e74206578636565647320737570706c7900000000000000000000006044820152fd5b600091601b54916117da83611597565b926117e8604051948561149c565b808452601b8552847f3ad8aa4f87544323a9d1e5dd902f40c356527a7955687113db5f9a85ad579dc1602086015b838310611a1f575050505060185493606482029082820460641483151715610fbc57908161185a93929695965050600161271060001983010401901515029061160c565b9283906000936118686115af565b95601954965b8351811015611a0e576020611883828661164c565b5101519661189c84611895848861164c565b515161160c565b9088156119e4576000670de0b6b3a7640000850290858204670de0b6b3a76400001486151715610fbc5750896118d191611b24565b828111156119f1575081156119e457816118ea916115e9565b926119116118f88a84611639565b6001670de0b6b3a7640000600019830104019015150290565b9080821161198f5761192d92916119279161160c565b946115e9565b96888089116119465750506001905b019591909561186e565b6119689550611976945061196e919250926119686118f89461197c999a61160c565b9061160c565b975087611639565b8261160c565b9061198a601d5480936115e9565b929190565b9550505050909550670de0b6b3a7640000829594950291808304670de0b6b3a764000014901517156115f6576119d56119ce61197c956119db94611b24565b80926115e9565b956115e9565b5060009061160c565b929397505060019061193c565b949950905061197c9697506119db94506119d592508391506115e9565b509291505061197c9293945061160c565b60026020600192604051611a3281611480565b855481528486015483820152815201920192019190611816565b6001600160a01b037fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c132054163303611a7f57565b608460405162461bcd60e51b815260206004820152602260248201527f4c69624469616d6f6e643a204d75737420626520636f6e7472616374206f776e60448201527f65720000000000000000000000000000000000000000000000000000000000006064820152fd5b600260175414611afa576002601755565b7f3ee5aeb50000000000000000000000000000000000000000000000000000000060005260046000fd5b908015611b4357611b3b6001916000198401611619565b019015150290565b634e487b7160005260126020526024601cfd5b906000602091828151910182855af115611bc7576000513d611bbe57506001600160a01b0381163b155b611b875750565b6001600160a01b03907f5274afe7000000000000000000000000000000000000000000000000000000006000521660045260246000fd5b60011415611b80565b6040513d6000823e3d90fdfea26469706673582212209c8fea3d5f0a073ad562eee24232e73b32f27f29fc222604bf76745bcae0463d64736f6c634300081b0033",
  "devdoc": {
    "errors": {
      "ReentrancyGuardReentrantCall()": [
        {
          "details": "Unauthorized reentrant call."
        }
      ],
      "SafeERC20FailedOperation(address)": [
        {
          "details": "An operation with an ERC-20 token failed."
        }
      ]
    },
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 8278,
        "contract": "contracts/0_originForge/ofTokenCurveFacet.sol:ofTokenCurveFacet",
        "label": "s",
        "offset": 0,
        "slot": "0",
        "type": "t_struct(AppStorage)8070_storage"
      },
      {
        "astId": 948,
        "contract": "contracts/0_originForge/ofTokenCurveFacet.sol:ofTokenCurveFacet",
        "label": "_status",
        "offset": 0,
        "slot": "23",
        "type": "t_uint256"
      },
      {
        "astId": 4903,
        "contract": "contracts/0_originForge/ofTokenCurveFacet.sol:ofTokenCurveFacet",
        "label": "ofTokenCurveSupply",
        "offset": 0,
        "slot": "24",
        "type": "t_uint256"
      },
      {
        "astId": 4905,
        "contract": "contracts/0_originForge/ofTokenCurveFacet.sol:ofTokenCurveFacet",
        "label": "ofTokenCurveMaxSupply",
        "offset": 0,
        "slot": "25",
        "type": "t_uint256"
      },
      {
        "astId": 4927,
        "contract": "contracts/0_originForge/ofTokenCurveFacet.sol:ofTokenCurveFacet",
        "label": "tradeCount",
        "offset": 0,
        "slot": "26",
        "type": "t_uint256"
      },
      {
        "astId": 4931,
        "contract": "contracts/0_originForge/ofTokenCurveFacet.sol:ofTokenCurveFacet",
        "label": "bondSteps",
        "offset": 0,
        "slot": "27",
        "type": "t_array(t_struct(BondStep)4910_storage)dyn_storage"
      },
      {
        "astId": 4936,
        "contract": "contracts/0_originForge/ofTokenCurveFacet.sol:ofTokenCurveFacet",
        "label": "tradeHistory",
        "offset": 0,
        "slot": "28",
        "type": "t_mapping(t_uint256,t_struct(Trade)4925_storage)"
      },
      {
        "astId": 4963,
        "contract": "contracts/0_originForge/ofTokenCurveFacet.sol:ofTokenCurveFacet",
        "label": "tradeFee",
        "offset": 0,
        "slot": "29",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(BondStep)4910_storage)dyn_storage": {
        "base": "t_struct(BondStep)4910_storage",
        "encoding": "dynamic_array",
        "label": "struct ofTokenCurveFacet.BondStep[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)10_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[10]",
        "numberOfBytes": "320"
      },
      "t_array(t_uint256)9_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[9]",
        "numberOfBytes": "288"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_enum(Nation)8268": {
        "encoding": "inplace",
        "label": "enum Nation",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_struct(User)8023_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct User)",
        "numberOfBytes": "32",
        "value": "t_struct(User)8023_storage"
      },
      "t_mapping(t_enum(Nation)8268,t_struct(NationInfo)8036_storage)": {
        "encoding": "mapping",
        "key": "t_enum(Nation)8268",
        "label": "mapping(enum Nation => struct NationInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(NationInfo)8036_storage"
      },
      "t_mapping(t_string_memory_ptr,t_address)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_string_memory_ptr,t_struct(Service)8007_storage)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => struct Service)",
        "numberOfBytes": "32",
        "value": "t_struct(Service)8007_storage"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_struct(Trade)4925_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct ofTokenCurveFacet.Trade)",
        "numberOfBytes": "32",
        "value": "t_struct(Trade)4925_storage"
      },
      "t_string_memory_ptr": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(AppStorage)8070_storage": {
        "encoding": "inplace",
        "label": "struct AppStorage",
        "members": [
          {
            "astId": 8039,
            "contract": "contracts/0_originForge/ofTokenCurveFacet.sol:ofTokenCurveFacet",
            "label": "ofStatus",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(OFStatus)7996_storage"
          },
          {
            "astId": 8041,
            "contract": "contracts/0_originForge/ofTokenCurveFacet.sol:ofTokenCurveFacet",
            "label": "userCount",
            "offset": 0,
            "slot": "16",
            "type": "t_uint256"
          },
          {
            "astId": 8045,
            "contract": "contracts/0_originForge/ofTokenCurveFacet.sol:ofTokenCurveFacet",
            "label": "contractAddresses",
            "offset": 0,
            "slot": "17",
            "type": "t_mapping(t_string_memory_ptr,t_address)"
          },
          {
            "astId": 8050,
            "contract": "contracts/0_originForge/ofTokenCurveFacet.sol:ofTokenCurveFacet",
            "label": "services",
            "offset": 0,
            "slot": "18",
            "type": "t_mapping(t_string_memory_ptr,t_struct(Service)8007_storage)"
          },
          {
            "astId": 8055,
            "contract": "contracts/0_originForge/ofTokenCurveFacet.sol:ofTokenCurveFacet",
            "label": "usersByAddress",
            "offset": 0,
            "slot": "19",
            "type": "t_mapping(t_address,t_struct(User)8023_storage)"
          },
          {
            "astId": 8059,
            "contract": "contracts/0_originForge/ofTokenCurveFacet.sol:ofTokenCurveFacet",
            "label": "usersByIndex",
            "offset": 0,
            "slot": "20",
            "type": "t_mapping(t_uint256,t_address)"
          },
          {
            "astId": 8063,
            "contract": "contracts/0_originForge/ofTokenCurveFacet.sol:ofTokenCurveFacet",
            "label": "usersByNickname",
            "offset": 0,
            "slot": "21",
            "type": "t_mapping(t_string_memory_ptr,t_address)"
          },
          {
            "astId": 8069,
            "contract": "contracts/0_originForge/ofTokenCurveFacet.sol:ofTokenCurveFacet",
            "label": "nations",
            "offset": 0,
            "slot": "22",
            "type": "t_mapping(t_enum(Nation)8268,t_struct(NationInfo)8036_storage)"
          }
        ],
        "numberOfBytes": "736"
      },
      "t_struct(BondStep)4910_storage": {
        "encoding": "inplace",
        "label": "struct ofTokenCurveFacet.BondStep",
        "members": [
          {
            "astId": 4907,
            "contract": "contracts/0_originForge/ofTokenCurveFacet.sol:ofTokenCurveFacet",
            "label": "rangeTo",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 4909,
            "contract": "contracts/0_originForge/ofTokenCurveFacet.sol:ofTokenCurveFacet",
            "label": "price",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(NationInfo)8036_storage": {
        "encoding": "inplace",
        "label": "struct NationInfo",
        "members": [
          {
            "astId": 8025,
            "contract": "contracts/0_originForge/ofTokenCurveFacet.sol:ofTokenCurveFacet",
            "label": "nationName",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 8027,
            "contract": "contracts/0_originForge/ofTokenCurveFacet.sol:ofTokenCurveFacet",
            "label": "nationCode",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 8029,
            "contract": "contracts/0_originForge/ofTokenCurveFacet.sol:ofTokenCurveFacet",
            "label": "nationFlag",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 8031,
            "contract": "contracts/0_originForge/ofTokenCurveFacet.sol:ofTokenCurveFacet",
            "label": "userCount",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 8035,
            "contract": "contracts/0_originForge/ofTokenCurveFacet.sol:ofTokenCurveFacet",
            "label": "_gap",
            "offset": 0,
            "slot": "4",
            "type": "t_array(t_uint256)10_storage"
          }
        ],
        "numberOfBytes": "448"
      },
      "t_struct(OFStatus)7996_storage": {
        "encoding": "inplace",
        "label": "struct OFStatus",
        "members": [
          {
            "astId": 7981,
            "contract": "contracts/0_originForge/ofTokenCurveFacet.sol:ofTokenCurveFacet",
            "label": "teamReserve",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 7983,
            "contract": "contracts/0_originForge/ofTokenCurveFacet.sol:ofTokenCurveFacet",
            "label": "communityReserve",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 7985,
            "contract": "contracts/0_originForge/ofTokenCurveFacet.sol:ofTokenCurveFacet",
            "label": "partnerReserve",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 7987,
            "contract": "contracts/0_originForge/ofTokenCurveFacet.sol:ofTokenCurveFacet",
            "label": "distributionReserve",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 7989,
            "contract": "contracts/0_originForge/ofTokenCurveFacet.sol:ofTokenCurveFacet",
            "label": "totalBurned",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 7991,
            "contract": "contracts/0_originForge/ofTokenCurveFacet.sol:ofTokenCurveFacet",
            "label": "totalMaxSupply",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 7995,
            "contract": "contracts/0_originForge/ofTokenCurveFacet.sol:ofTokenCurveFacet",
            "label": "_gap",
            "offset": 0,
            "slot": "6",
            "type": "t_array(t_uint256)10_storage"
          }
        ],
        "numberOfBytes": "512"
      },
      "t_struct(Service)8007_storage": {
        "encoding": "inplace",
        "label": "struct Service",
        "members": [
          {
            "astId": 7998,
            "contract": "contracts/0_originForge/ofTokenCurveFacet.sol:ofTokenCurveFacet",
            "label": "serviceName",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 8000,
            "contract": "contracts/0_originForge/ofTokenCurveFacet.sol:ofTokenCurveFacet",
            "label": "mintAmount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 8002,
            "contract": "contracts/0_originForge/ofTokenCurveFacet.sol:ofTokenCurveFacet",
            "label": "burnAmount",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 8006,
            "contract": "contracts/0_originForge/ofTokenCurveFacet.sol:ofTokenCurveFacet",
            "label": "_gap",
            "offset": 0,
            "slot": "3",
            "type": "t_array(t_uint256)10_storage"
          }
        ],
        "numberOfBytes": "416"
      },
      "t_struct(Trade)4925_storage": {
        "encoding": "inplace",
        "label": "struct ofTokenCurveFacet.Trade",
        "members": [
          {
            "astId": 4912,
            "contract": "contracts/0_originForge/ofTokenCurveFacet.sol:ofTokenCurveFacet",
            "label": "tradeId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 4914,
            "contract": "contracts/0_originForge/ofTokenCurveFacet.sol:ofTokenCurveFacet",
            "label": "tradeType",
            "offset": 0,
            "slot": "1",
            "type": "t_bool"
          },
          {
            "astId": 4916,
            "contract": "contracts/0_originForge/ofTokenCurveFacet.sol:ofTokenCurveFacet",
            "label": "user",
            "offset": 1,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 4918,
            "contract": "contracts/0_originForge/ofTokenCurveFacet.sol:ofTokenCurveFacet",
            "label": "nickname",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 4920,
            "contract": "contracts/0_originForge/ofTokenCurveFacet.sol:ofTokenCurveFacet",
            "label": "inputAmount",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 4922,
            "contract": "contracts/0_originForge/ofTokenCurveFacet.sol:ofTokenCurveFacet",
            "label": "outputAmount",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 4924,
            "contract": "contracts/0_originForge/ofTokenCurveFacet.sol:ofTokenCurveFacet",
            "label": "tradeTime",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_struct(User)8023_storage": {
        "encoding": "inplace",
        "label": "struct User",
        "members": [
          {
            "astId": 8009,
            "contract": "contracts/0_originForge/ofTokenCurveFacet.sol:ofTokenCurveFacet",
            "label": "nickname",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 8011,
            "contract": "contracts/0_originForge/ofTokenCurveFacet.sol:ofTokenCurveFacet",
            "label": "userIndex",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 8013,
            "contract": "contracts/0_originForge/ofTokenCurveFacet.sol:ofTokenCurveFacet",
            "label": "userAddress",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 8016,
            "contract": "contracts/0_originForge/ofTokenCurveFacet.sol:ofTokenCurveFacet",
            "label": "nation",
            "offset": 20,
            "slot": "2",
            "type": "t_enum(Nation)8268"
          },
          {
            "astId": 8018,
            "contract": "contracts/0_originForge/ofTokenCurveFacet.sol:ofTokenCurveFacet",
            "label": "originNumber",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 8022,
            "contract": "contracts/0_originForge/ofTokenCurveFacet.sol:ofTokenCurveFacet",
            "label": "_gap",
            "offset": 0,
            "slot": "4",
            "type": "t_array(t_uint256)9_storage"
          }
        ],
        "numberOfBytes": "416"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}